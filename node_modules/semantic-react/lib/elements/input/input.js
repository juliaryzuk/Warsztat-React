'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _elementType = require('react-prop-types/lib/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _defaultProps = require('../../defaultProps');

var _defaultProps2 = _interopRequireDefault(_defaultProps);

var _icon = require('./../icon/icon');

var _icon2 = _interopRequireDefault(_icon);

var _label = require('./../label/label');

var _label2 = _interopRequireDefault(_label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Controlled basic input
 */
var Input = (_temp = _class = function (_React$PureComponent) {
    _inherits(Input, _React$PureComponent);

    function Input() {
        _classCallCheck(this, Input);

        return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
    }

    _createClass(Input, [{
        key: 'render',

        /* eslint-enable */

        value: function render() {
            var _props = this.props,
                component = _props.component,
                children = _props.children,
                className = _props.className,
                defaultClasses = _props.defaultClasses,
                style = _props.style,
                actionComponent = _props.actionComponent,
                actionPosition = _props.actionPosition,
                fluid = _props.fluid,
                icon = _props.icon,
                iconPosition = _props.iconPosition,
                iconComponent = _props.iconComponent,
                inverted = _props.inverted,
                label = _props.label,
                labelComponent = _props.labelComponent,
                labelPosition = _props.labelPosition,
                placeholder = _props.placeholder,
                size = _props.size,
                state = _props.state,
                transparent = _props.transparent,
                value = _props.value,
                other = _objectWithoutProperties(_props, ['component', 'children', 'className', 'defaultClasses', 'style', 'actionComponent', 'actionPosition', 'fluid', 'icon', 'iconPosition', 'iconComponent', 'inverted', 'label', 'labelComponent', 'labelPosition', 'placeholder', 'size', 'state', 'transparent', 'value']);

            var wrapperClassName = (0, _classnames2.default)(className, this.getClasses());
            var InputComponent = component;
            var IconComponent = iconComponent || Input.Components.Icon;
            var LabelComponent = labelComponent || Input.Components.Label;
            var ActionComponent = actionComponent;

            return _react2.default.createElement(
                'div',
                { className: wrapperClassName, style: style },
                actionComponent && actionPosition === 'left' && _react2.default.createElement(ActionComponent, null),
                label && (labelPosition === 'left' || labelPosition === 'left corner') && _react2.default.createElement(
                    LabelComponent,
                    { corner: labelPosition === 'left corner' ? 'left' : null },
                    label
                ),
                _react2.default.createElement(InputComponent, _extends({
                    type: 'text' }, other, {
                    value: value,
                    placeholder: placeholder })),
                state && state === 'loading' || Array.isArray(state) && state.indexOf("loading") !== -1 ? _react2.default.createElement(_icon2.default, { name: 'search' }) : icon && typeof icon === 'string' && _react2.default.createElement(IconComponent, { name: icon }),
                label && (labelPosition === 'right' || labelPosition === 'right corner') && _react2.default.createElement(
                    LabelComponent,
                    { corner: labelPosition === 'right corner' ? 'right' : null },
                    label
                ),
                actionComponent && actionPosition === 'right' && _react2.default.createElement(ActionComponent, null),
                children
            );
        }

        /* eslint-disable */

    }, {
        key: 'getClasses',
        value: function getClasses() {
            var classes = {
                ui: this.props.defaultClasses,
                input: this.props.defaultClasses,

                fluid: this.props.fluid,
                inverted: this.props.inverted,
                transparent: this.props.transparent
            };
            classes[this.props.size] = !!this.props.size;
            // Loading state should add icon
            if (this.props.state && (this.props.state === 'loading' || Array.isArray(this.props.state) && this.props.state.indexOf('loading') !== -1)) {
                classes['icon'] = true;
            }
            if (typeof this.props.state === 'string') {
                classes[this.props.state] = true;
            } else if (Array.isArray(this.props.state)) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.props.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var key = _step.value;

                        classes[key] = true;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            // action input
            if (this.props.actionComponent) {
                classes[this.props.actionPosition] = true;
                classes['action'] = true;
            }
            // Icon input
            if (this.props.icon) {
                classes[this.props.iconPosition] = true;
                classes['icon'] = true;
            }
            // Labeled input
            if (this.props.label) {
                classes[this.props.labelPosition] = true;
                classes['labeled'] = true;
            }
            return classes;
        }
    }]);

    return Input;
}(_react2.default.PureComponent), _class.defaultProps = _extends({}, _defaultProps2.default.defaultProps, {
    component: 'input',
    iconPosition: 'right',
    labelPosition: 'left',
    actionPosition: 'right'
}), _class.Components = {
    Icon: _icon2.default,
    Label: _label2.default
}, _temp);
exports.default = Input;
//# sourceMappingURL=input.js.map