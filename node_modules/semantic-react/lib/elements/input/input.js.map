{"version":3,"sources":["../../../src/components/elements/input/input.jsx"],"names":["Input","props","component","children","className","defaultClasses","style","actionComponent","actionPosition","fluid","icon","iconPosition","iconComponent","inverted","label","labelComponent","labelPosition","placeholder","size","state","transparent","value","other","wrapperClassName","getClasses","InputComponent","IconComponent","Components","Icon","LabelComponent","Label","ActionComponent","Array","isArray","indexOf","classes","ui","input","key","PureComponent","defaultProps"],"mappings":"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","file":"input.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport DefaultProps from '../../defaultProps';\nimport Icon from './../icon/icon';\nimport Label from './../label/label';\n\n/**\n * Controlled basic input\n */\nexport default class Input extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Action component\n         */\n        actionComponent: elementType,\n        /**\n         * Action position\n         */\n        actionPosition: PropTypes.oneOf(['left', 'right']),\n        /**\n         * An input can take the size of its container\n         */\n        fluid: PropTypes.bool,\n        /**\n         * Render icon\n         */\n        icon: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.bool\n        ]),\n        /**\n         * Icon position\n         */\n        iconPosition: PropTypes.oneOf(['left', 'right']),\n        /**\n         * Pass custom icon component\n         */\n        iconComponent: elementType,\n        /**\n         * Inverted input\n         */\n        inverted: PropTypes.bool,\n        /**\n         * Render label for input\n         */\n        label: PropTypes.string,\n        /**\n         * Pass custom label component\n         */\n        labelComponent: elementType,\n        /**\n         * Label position\n         */\n        labelPosition: PropTypes.oneOf(['left', 'right', 'left corner', 'right corner']),\n        /**\n         * Input placeholder\n         */\n        placeholder: PropTypes.string,\n        /**\n         * Input size\n         */\n        size: PropTypes.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive']),\n        /**\n         * Input state\n         */\n        state: PropTypes.oneOfType([\n            PropTypes.oneOf(['focus', 'loading', 'disabled', 'error']),\n            PropTypes.arrayOf(PropTypes.oneOf(['focus', 'loading', 'disabled', 'error']))\n        ]),\n        /**\n         * Render transparent input\n         */\n        transparent: PropTypes.bool,\n        /**\n         * Input value\n         */\n        value: PropTypes.string\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        component: 'input',\n        iconPosition: 'right',\n        labelPosition: 'left',\n        actionPosition: 'right'\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Icon: Icon,\n        Label: Label\n    };\n    /* eslint-enable */\n\n    render() {\n        const {\n            component, children, className, defaultClasses, style, actionComponent, actionPosition, fluid, icon, iconPosition, iconComponent,\n            inverted, label, labelComponent, labelPosition, placeholder, size, state, transparent, value, ...other\n        } = this.props;\n\n        const wrapperClassName = classNames(className, this.getClasses());\n        const InputComponent = component;\n        const IconComponent = iconComponent || Input.Components.Icon;\n        const LabelComponent = labelComponent || Input.Components.Label;\n        const ActionComponent = actionComponent;\n\n        return (\n            <div className={wrapperClassName} style={style}>\n                 {/* First should be action in left position */}\n                 {actionComponent && actionPosition === 'left' && <ActionComponent />}\n                 {/* Second should be label in left or left corner position */}\n                 {label && (labelPosition === 'left' || labelPosition === 'left corner') &&\n                 <LabelComponent corner={labelPosition === 'left corner' ? 'left' : null}>\n                                 {label}\n                 </LabelComponent>}\n                 {/* Next input itself */}\n                 <InputComponent\n                    type=\"text\" {...other}\n                    value={value}\n                    placeholder={placeholder} />\n                 {/* Icon, markup doesn't matter for placement */}\n                 {/* Always render search icon for loading state regardless of settings */}\n                 {(state && (state === 'loading') || (Array.isArray(state) && state.indexOf(\"loading\") !== -1))\n                     ? <Icon name=\"search\" />\n                     : (icon && typeof icon === 'string' && <IconComponent name={icon}/>)\n                 }\n                 {/* Label in right position */}\n                 {label && (labelPosition === 'right' || labelPosition === 'right corner') &&\n                 <LabelComponent corner={labelPosition === 'right corner' ? 'right' : null}>\n                                 {label}\n                 </LabelComponent>}\n                 {/* Action in right position */}\n                 {actionComponent && actionPosition === 'right' && <ActionComponent/>}\n                 {/* Any children goes after all stuff */}\n                 {children}\n            </div>\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            ui: this.props.defaultClasses,\n            input: this.props.defaultClasses,\n\n            fluid: this.props.fluid,\n            inverted: this.props.inverted,\n            transparent: this.props.transparent\n        };\n        classes[this.props.size] = !!this.props.size;\n        // Loading state should add icon\n        if (this.props.state && (this.props.state === 'loading' ||\n            (Array.isArray(this.props.state) && this.props.state.indexOf('loading') !== -1))) {\n            classes['icon'] = true;\n        }\n        if (typeof this.props.state === 'string') {\n            classes[this.props.state] = true;\n        } else if (Array.isArray(this.props.state)) {\n            for (const key of this.props.state) {\n                classes[key] = true;\n            }\n        }\n\n        // action input\n        if (this.props.actionComponent) {\n            classes[this.props.actionPosition] = true;\n            classes['action'] = true;\n        }\n        // Icon input\n        if (this.props.icon) {\n            classes[this.props.iconPosition] = true;\n            classes['icon'] = true;\n        }\n        // Labeled input\n        if (this.props.label) {\n            classes[this.props.labelPosition] = true;\n            classes['labeled'] = true;\n        }\n        return classes;\n    }\n}\n"]}