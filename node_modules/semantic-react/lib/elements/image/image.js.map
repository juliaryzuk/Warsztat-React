{"version":3,"sources":["../../../src/components/elements/image/image.jsx"],"names":["validProps","aligned","floated","spaced","Image","props","component","children","defaultClasses","avatar","bordered","centered","fluid","size","src","state","shape","wrapComponent","other","className","getClasses","ImageComponent","shouldWrapIntoDiv","WrapComponent","classes","ui","context","isItemsChild","image","circular","rounded","isCommentsChild","Children","count","PureComponent","contextTypes","bool","defaultProps"],"mappings":"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","file":"image.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport elementType from 'react-prop-types/lib/elementType';\nimport { validateClassProps } from '../../utilities';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\nconst validProps = {\n    aligned: ['top', 'middle', 'bottom'],\n    floated: ['right', 'left'],\n    spaced: ['right', 'left']\n};\n\n/**\n * Just an image\n */\nexport default class Image extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * An image can specify its vertical alignment\n         */\n        aligned: PropTypes.oneOf(['top', 'middle', 'bottom']),\n        /**\n         * An image may be formatted to appear inline with text as an avatar\n         */\n        avatar: PropTypes.bool,\n        /**\n         * An image may include a border to emphasize the edges of white or transparent content\n         */\n        bordered: PropTypes.bool,\n        /**\n         * An image can appear centered in a content block\n         */\n        centered: PropTypes.bool,\n        /**\n         * An image can take up the width of its container\n         */\n        fluid: PropTypes.bool,\n        /**\n         * An image can sit to the left or right of other content\n         */\n        floated: PropTypes.oneOf(['right', 'left']),\n        /**\n         * An image may appear at different sizes\n         */\n        size: PropTypes.string,\n        /**\n         * An image can specify that it needs an additional spacing to separate it from nearby content\n         */\n        spaced: PropTypes.oneOfType([\n            PropTypes.oneOf(['right', 'left']),\n            PropTypes.bool\n        ]),\n        /**\n         * Image src\n         */\n        src: PropTypes.string.isRequired,\n        /**\n         * Image shape\n         */\n        shape: PropTypes.oneOf(['circular', 'rounded']),\n        /**\n         * Image state, could be disabled or hidden\n         */\n        state: PropTypes.oneOf(['disabled', 'visible', 'hidden']),\n        /**\n         * Wrap image component under other component, for example <a/> or <div/>\n         * In this case this component will receive image classes instead\n         */\n        wrapComponent: PropTypes.oneOfType([\n            PropTypes.bool,\n            elementType\n        ])\n    };\n\n    static contextTypes = {\n        isCommentsChild: PropTypes.bool, // Image in Comment should be wrapper into <div/>\n        isItemsChild: PropTypes.bool // Image in Items should be wrapped into <div/>\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        component: 'img',\n        wrapComponent: false\n    };\n\n    render() {\n        const {\n            component, children, defaultClasses, aligned, avatar, bordered, centered,\n            fluid, floated, size, spaced, src, state, shape, wrapComponent, ...other\n        } = this.props;\n\n        other.className = classNames(other.className, this.getClasses());\n        let ImageComponent = component;\n        if (this.shouldWrapIntoDiv() || wrapComponent) {\n            const WrapComponent = (typeof wrapComponent === 'undefined' || typeof wrapComponent === 'boolean') ? 'div' : wrapComponent;\n            return (\n                <WrapComponent {...other}>\n                    {children}\n                    <ImageComponent src={src}/>\n                </WrapComponent>\n            );\n        } else {\n            return (\n                <ImageComponent {...other} src={src}/>\n            );\n        }\n    }\n\n    getClasses() {\n        let classes = {\n            // Do not set ui class if image is items child, but set anyway is items child and should has size prop\n            ui: this.props.defaultClasses && (!this.context.isItemsChild || (this.context.isItemsChild && this.props.size)),\n            image: this.props.defaultClasses,\n\n            // variations\n            aligned: this.props.aligned,\n            avatar: this.props.avatar,\n            bordered: this.props.bordered,\n            centered: this.props.centered,\n            circular: this.props.shape === 'circular',\n            floated: this.props.floated,\n            fluid: this.props.fluid,\n            rounded: this.props.shape === 'rounded',\n            spaced: this.props.spaced\n        };\n\n        classes[this.props.state] = !!this.props.state;\n        classes[this.props.size] = !!this.props.size;\n\n        return validateClassProps(classes, this.props, validProps);\n    }\n\n    /**\n     * Return true if image should be forced wrapped into div\n     * @returns {boolean}\n     */\n    shouldWrapIntoDiv() {\n        return (this.context.isCommentsChild || this.context.isItemsChild || React.Children.count(this.props.children) > 0);\n    }\n}\n"]}