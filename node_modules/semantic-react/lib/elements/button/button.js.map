{"version":3,"sources":["../../../src/components/elements/button/button.jsx"],"names":["validProps","animated","attached","floated","Button","props","basic","children","circular","color","component","compact","defaultClasses","emphasis","fluid","inverted","size","state","toggle","other","Component","context","isAttached","Children","count","className","getClasses","classes","ui","button","social","PureComponent","contextTypes","bool","defaultProps"],"mappings":"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","file":"button.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { validateClassProps } from '../../utilities';\nimport DefaultProps from './../../defaultProps';\n\nconst validProps = {\n    animated: ['vertical', 'fade'],\n    attached: ['left', 'right', 'bottom', 'top'],\n    floated: ['left', 'right']\n};\n\n/**\n * Basic button. Icon and labeled buttons have own components\n */\nexport default class Button extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Adds a fade or slide animation on hover.\n         */\n        animated: PropTypes.oneOfType([\n            PropTypes.oneOf(['fade', 'vertical']),\n            PropTypes.bool\n        ]),\n\n        /**\n         * It's attached to some other attachable component.\n         */\n        attached: PropTypes.oneOfType([\n            PropTypes.oneOf(['left', 'right', 'bottom', 'top']),\n            PropTypes.bool\n        ]),\n\n        /**\n         * Adds simple styling to the component.\n         */\n        basic: PropTypes.bool,\n\n        /**\n         * A button can be circular\n         */\n        circular: PropTypes.bool,\n\n        /**\n         * Adds a SemanticUI color class.\n         */\n        color: PropTypes.string,\n\n        /**\n         * Reduces the padding on the component.\n         */\n        compact: PropTypes.bool,\n\n        /**\n         * A button can be formatted to show different levels of emphasis\n         */\n        emphasis: PropTypes.oneOf(['primary', 'secondary', 'positive', 'negative']),\n\n        /**\n         * Forces to component to float left or right.\n         */\n        floated: PropTypes.oneOf(['left', 'right']),\n\n        /**\n         * The component fills the parent components horizontal space.\n         */\n        fluid: PropTypes.bool,\n\n        /**\n         * Styles the component for a dark background.\n         */\n        inverted: PropTypes.bool,\n\n        /**\n         * Adds a SemanticUI size class.\n         */\n        size: PropTypes.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive']),\n\n        /**\n         * Indicates whether the button is currently highlighted or disabled.\n         */\n        state: PropTypes.oneOf(['active', 'disabled', 'loading']),\n\n        /**\n         * A button can be formatted to toggle on and off\n         */\n        toggle: PropTypes.bool\n    };\n\n    static contextTypes = {\n        isAttached: PropTypes.bool\n    };\n\n    static defaultProps = {\n        defaultClasses: true\n    };\n\n    render() {\n        // consume this.props\n        let { animated, attached, basic, children, circular, color, component,\n            compact, defaultClasses, emphasis, floated, fluid,\n            inverted, size, state, toggle,\n            ...other\n        } = this.props;\n\n        let Component = (attached || this.context.isAttached || animated || React.Children.count(this.props.children) > 1) ? 'div' : 'button';\n        if (component) {\n            Component = component;\n        }\n\n        other.className = classNames(other.className, this.getClasses());\n\n        return (\n            <Component {...other}>\n                       {children}\n            </Component>\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            // default\n            ui: this.props.defaultClasses,\n\n            // position based this.props\n            floated: this.props.floated,\n            attached: this.props.attached,\n\n            // types\n            animated: this.props.animated,\n            basic: this.props.basic,\n            inverted: this.props.inverted,\n\n            // variations\n            circular: this.props.circular,\n            compact: this.props.compact,\n            fluid: this.props.fluid,\n\n            // component\n            button: this.props.defaultClasses\n        };\n\n        // string types\n        classes[this.props.color] = !!this.props.color;\n        classes[this.props.size] = !!this.props.size;\n        classes[this.props.social] = !!this.props.social;\n        classes[this.props.emphasis] = !!this.props.emphasis;\n        classes[this.props.state] = !!this.props.state;\n\n        return validateClassProps(classes, this.props, validProps);\n    }\n}\n"]}