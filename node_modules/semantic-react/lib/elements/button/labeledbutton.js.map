{"version":3,"sources":["../../../src/components/elements/button/labeledbutton.jsx"],"names":["validProps","labeled","LabeledButton","props","children","labelType","label","labelComponent","other","LabelComponent","getDefaultLabelComponent","className","getClasses","markup","push","type","Components","Icon","Label","classes","ui","icon","button","PureComponent","defaultProps","Button"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,aAAa;AACfC,aAAS,CAAC,MAAD,EAAS,OAAT;AADM,CAAnB;;AAKA;;;IAGqBC,a;;;;;;;;;;;;AAgCjB;;iCAES;AAAA,yBACqE,KAAKC,KAD1E;AAAA,gBACGC,QADH,UACGA,QADH;AAAA,gBACaH,OADb,UACaA,OADb;AAAA,gBACsBI,SADtB,UACsBA,SADtB;AAAA,gBACiCC,KADjC,UACiCA,KADjC;AAAA,gBACwCC,cADxC,UACwCA,cADxC;AAAA,gBAC2DC,KAD3D;;AAEL,gBAAIC,iBAAkBF,cAAD,GAAmBA,cAAnB,GAAoC,KAAKG,wBAAL,CAA8BL,SAA9B,CAAzD;;AAGA,gBAAIA,cAAc,MAAlB,EAA0B;AACtB;AACAG,sBAAMG,SAAN,GAAkB,0BAAWH,MAAMG,SAAjB,EAA4B,KAAKC,UAAL,EAA5B,CAAlB;AACA,uBACI;AAAC,iCAAD,CAAe,UAAf,CAA0B,MAA1B;AAAqCJ,yBAArC;AACI,kDAAC,cAAD,IAAgB,MAAMF,KAAtB,GADJ;AAEKF;AAFL,iBADJ;AAMH,aATD,MASO;AACH;AACA,oBAAMO,YAAY,0BAAW,KAAKC,UAAL,EAAX,CAAlB;AACA,oBAAIC,SAAS,EAAb;AACA;AACA;AACA,oBAAIZ,YAAY,MAAhB,EAAwB;AACpBY,2BAAOC,IAAP,CAAY;AAAC,sCAAD;AAAA,0BAAgB,WAAhB,EAAsB,KAAI,OAA1B;AAAmCR;AAAnC,qBAAZ;AACAO,2BAAOC,IAAP,CACI;AAAC,qCAAD,CAAe,UAAf,CAA0B,MAA1B;AAAA,mCAAiC,KAAI,QAArC,IAAkDN,KAAlD;AACKJ;AADL,qBADJ;AAKH,iBAPD,MAOO;AACHS,2BAAOC,IAAP,CACI;AAAC,qCAAD,CAAe,UAAf,CAA0B,MAA1B;AAAA,mCAAiC,KAAI,QAArC,IAAkDN,KAAlD;AACKJ;AADL,qBADJ;AAKAS,2BAAOC,IAAP,CAAY;AAAC,sCAAD;AAAA,0BAAgB,WAAhB,EAAsB,KAAI,OAA1B;AAAmCR;AAAnC,qBAAZ;AACH;AACD;AACA;AACA,uBACI;AAAA;AAAA,sBAAK,WAAWK,SAAhB;AACME;AADN,iBADJ;AAKH;AACJ;;AAED;;;;;;AArDA;;;;iDAyDyBE,I,EAAM;AAC3B,mBAAQA,SAAS,MAAV,GAAoBb,cAAcc,UAAd,CAAyBC,IAA7C,GAAoDf,cAAcc,UAAd,CAAyBE,KAApF,CAD2B,CACgE;AAC9F;;AAED;;;;;;qCAGa;AACT,gBAAIC,UAAU;AACVC,oBAAI,KAAKjB,KAAL,CAAWE,SAAX,KAAyB,MADnB,EAC2B;AACrCgB,sBAAM,KAAKlB,KAAL,CAAWE,SAAX,KAAyB,MAFrB;AAGViB,wBAAQ,KAAKnB,KAAL,CAAWE,SAAX,KAAyB;AAHvB,aAAd;AAKA,mBAAO,mCAAmBc,OAAnB,EAA4B,KAAKhB,KAAjC,EAAwCH,UAAxC,CAAP;AACH;;;;EAjGsC,gBAAMuB,a,UAqBtCC,Y,GAAe;AAClBvB,aAAS,OADS;AAElBI,eAAW;AAFO,C,SAMfW,U,GAAa;AAChBC,wBADgB;AAEhBC,0BAFgB;AAGhBO;AAHgB,C;kBA3BHvB,a","file":"labeledbutton.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport Icon from './../icon/icon';\nimport Label from './../label/label';\nimport Button from './button';\nimport { validateClassProps } from '../../utilities';\n\nconst validProps = {\n    labeled: ['left', 'right']\n};\n\n\n/**\n * Labeled button renders button with label, either text label or icon\n */\nexport default class LabeledButton extends React.PureComponent {\n    static propTypes = {\n        ...Button.propTypes,\n        /**\n         * Label position, default to right\n         */\n        labeled: PropTypes.oneOf(['left', 'right']),\n        /**\n         * Type of label, could be text label or icon\n         */\n        labelType: PropTypes.oneOf(['text', 'icon']),\n        /**\n         * Label, if given string will be used as label text or icon name (if labelType is icon).\n         */\n        label: PropTypes.string.isRequired,\n        /**\n         * Label component. Default will be Icon for labelType icon and Label for labelType label\n         */\n        labelComponent: elementType\n    };\n\n    static defaultProps = {\n        labeled: 'right',\n        labelType: 'text'\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Icon: Icon,\n        Label: Label,\n        Button: Button\n    };\n    /* eslint-enable */\n\n    render() {\n        const { children, labeled, labelType, label, labelComponent, ...other } = this.props;\n        let LabelComponent = (labelComponent) ? labelComponent : this.getDefaultLabelComponent(labelType);\n\n\n        if (labelType === 'icon') {\n            // Easy markup, it's the standard button with labeled icon prefix, the icon order doesn't matter\n            other.className = classNames(other.className, this.getClasses());\n            return (\n                <LabeledButton.Components.Button {...other}>\n                    <LabelComponent name={label}/>\n                    {children}\n                </LabeledButton.Components.Button>\n            )\n        } else {\n            // Text labeled button, this is slightly harder, label order does matter, also need to be prefixed with <div>\n            const className = classNames(this.getClasses());\n            let markup = [];\n            /* eslint-disable react/jsx-max-props-per-line */\n            // Should be label basic by default?\n            if (labeled === 'left') {\n                markup.push(<LabelComponent basic key=\"label\">{label}</LabelComponent>);\n                markup.push(\n                    <LabeledButton.Components.Button key=\"button\" {...other}>\n                        {children}\n                    </LabeledButton.Components.Button>\n                )\n            } else {\n                markup.push(\n                    <LabeledButton.Components.Button key=\"button\" {...other}>\n                        {children}\n                    </LabeledButton.Components.Button>\n                );\n                markup.push(<LabelComponent basic key=\"label\">{label}</LabelComponent>);\n            }\n            /* eslint-enable react/jsx-max-props-per-line */\n            // TODO: Should allow to customize this div??\n            return (\n                <div className={className}>\n                     {markup}\n                </div>\n            )\n        }\n    }\n\n    /**\n     * Returns default component for label\n     * @param {string} type\n     */\n    getDefaultLabelComponent(type) {\n        return (type === 'icon') ? LabeledButton.Components.Icon : LabeledButton.Components.Label; // eslint-disable-line\n    }\n\n    /**\n     * Returns class name\n     */\n    getClasses() {\n        let classes = {\n            ui: this.props.labelType !== 'icon', // no need to add ui since <Button> will add it\n            icon: this.props.labelType === 'icon',\n            button: this.props.labelType !== 'icon'\n        };\n        return validateClassProps(classes, this.props, validProps);\n    }\n}\n\n"]}