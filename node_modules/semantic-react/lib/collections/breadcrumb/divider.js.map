{"version":3,"sources":["../../../src/components/collections/breadcrumb/divider.jsx"],"names":["BreadcrumbDivider","props","component","defaultClasses","children","other","className","getClasses","Component","Components","Icon","Children","toArray","iconChild","otherChilds","cloneElement","divider","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;;;IAGqBA,iB;;;;;;;;;;;;AAajB;;iCAES;AAAA,yBACqD,KAAKC,KAD1D;AAAA,gBACGC,SADH,UACGA,SADH;AAAA,gBACcC,cADd,UACcA,cADd;AAAA,gBAC8BC,QAD9B,UAC8BA,QAD9B;AAAA,gBAC2CC,KAD3C;;AAELA,kBAAMC,SAAN,GAAkB,0BAAWD,MAAMC,SAAjB,EAA4B,KAAKC,UAAL,EAA5B,CAAlB;AACA,gBAAIC,YAAYN,SAAhB;;AAEA;AACA,gBAAI,8BAAcE,QAAd,EAAwBJ,kBAAkBS,UAAlB,CAA6BC,IAArD,CAAJ,EAAgE;AAAA,4CACtB,gBAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CADsB;AAAA;AAAA,oBACpDS,SADoD;AAAA,oBACtCC,WADsC;;AAE5D,uBAAO,gBAAMC,YAAN,CAAmBF,SAAnB,EAA8B;AACjCP,+BAAW,0BAAWO,UAAUZ,KAAV,CAAgBK,SAA3B,EAAsC,KAAKC,UAAL,EAAtC;AADsB,iBAA9B,CAAP;AAGH,aALD,MAKO;AACH,uBACI;AAAC,6BAAD;AAAeF,yBAAf;AACKD;AADL,iBADJ;AAKH;AACJ;;AAxBD;;;;qCA0Ba;AACT,mBAAO;AACHY,yBAAS,KAAKf,KAAL,CAAWE;AADjB,aAAP;AAGH;;;;EAvC0C,gBAAMc,a,UAK1CC,Y,gBACA,uBAAaA,Y,UAIbT,U,GAAa;AAChBC;AADgB,C;kBAVHV,iB","file":"divider.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\nimport { hasFirstChild } from '../../utilities';\nimport Icon from '../../elements/icon/icon';\n\n/**\n * Divider for breadcrumb\n */\nexport default class BreadcrumbDivider extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Icon: Icon\n    };\n    /* eslint-enable */\n\n    render() {\n        const { component, defaultClasses, children, ...other } = this.props;\n        other.className = classNames(other.className, this.getClasses());\n        let Component = component;\n\n        // If divider has icon child return only icon\n        if (hasFirstChild(children, BreadcrumbDivider.Components.Icon)) {\n            const [ iconChild, ...otherChilds ] = React.Children.toArray(children);\n            return React.cloneElement(iconChild, {\n                className: classNames(iconChild.props.className, this.getClasses())\n            });\n        } else {\n            return (\n                <Component {...other}>\n                    {children}\n                </Component>\n            );\n        }\n    }\n\n    getClasses() {\n        return {\n            divider: this.props.defaultClasses\n        }\n    }\n}\n"]}