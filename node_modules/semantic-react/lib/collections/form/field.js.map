{"version":3,"sources":["../../../src/components/collections/form/field.jsx"],"names":["Field","label","props","children","className","component","defaultClasses","grouped","inline","required","state","width","other","getClasses","createElement","Components","Checkbox","CheckboxFields","renderLabel","classes","disabled","error","field","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,K;;;;;;;;;;;;AAyCjB;;oCAEYC,K,EAAO;AACf,mBACI;AAAA;AAAA,kBAAO,KAAKA,QAAQ,OAApB;AAA8BA;AAA9B,aADJ;AAGH;;AAXD;;;;iCAaS;AACL;AADK,yBAE8G,KAAKC,KAFnH;AAAA,gBAECC,QAFD,UAECA,QAFD;AAAA,gBAEWC,SAFX,UAEWA,SAFX;AAAA,gBAEsBC,SAFtB,UAEsBA,SAFtB;AAAA,gBAEiCC,cAFjC,UAEiCA,cAFjC;AAAA,gBAEiDC,OAFjD,UAEiDA,OAFjD;AAAA,gBAE0DC,MAF1D,UAE0DA,MAF1D;AAAA,gBAEkEP,KAFlE,UAEkEA,KAFlE;AAAA,gBAEyEQ,QAFzE,UAEyEA,QAFzE;AAAA,gBAEmFC,KAFnF,UAEmFA,KAFnF;AAAA,gBAE0FC,KAF1F,UAE0FA,KAF1F;AAAA,gBAEoGC,KAFpG;AAGL;;;AACAA,kBAAMR,SAAN,GAAkB,0BAAWA,SAAX,EAAsB,KAAKS,UAAL,EAAtB,CAAlB;;AAEA,mBAAO,gBAAMC,aAAN,CACHT,SADG,EAEHO,KAFG,EAGH,CACI,8BAAcT,QAAd,EAAwBH,MAAMe,UAAN,CAAiBC,QAAzC,KAAsD,8BAAcb,QAAd,EAAwBH,MAAMe,UAAN,CAAiBE,cAAzC,CAAtD,IAAkH,CAAChB,KAAnH,IAA4HA,SAAS,EAArI,GAA2I,IAA3I,GAAkJ,KAAKiB,WAAL,CAAiB,KAAKhB,KAAL,CAAWD,KAA5B,CADtJ,EAEIE,QAFJ,CAHG,CAAP;AAQH;;;qCAEY;AACT,gBAAIgB,UAAU;AACVC,0BAAU,KAAKlB,KAAL,CAAWQ,KAAX,KAAqB,UADrB;AAEVW,uBAAO,KAAKnB,KAAL,CAAWQ,KAAX,KAAqB,OAFlB;;AAIVD,0BAAU,KAAKP,KAAL,CAAWO,QAJX;AAKVD,wBAAQ,KAAKN,KAAL,CAAWM,MALT;AAMVD,yBAAS,KAAKL,KAAL,CAAWK;AANV,aAAd;;AASA,gBAAI,KAAKL,KAAL,CAAWS,KAAf,EAAsB;AAClB,oBAAI,KAAKT,KAAL,CAAWS,KAAX,GAAmB,CAAnB,IAAyB,KAAKT,KAAL,CAAWS,KAAX,IAAoB,EAAjD,EAAqD;AACjDQ,4BAAQ,mBAAQ,KAAKjB,KAAL,CAAWS,KAAnB,IAA4B,OAApC,IAA+C,IAA/C;AACH;AACJ;;AAEDQ,oBAAQG,KAAR,GAAgB,KAAKpB,KAAL,CAAWI,cAA3B;;AAEA,mBAAOa,OAAP;AACH;;;;EApF8B,gBAAMI,a,UAgC9BC,Y,gBACA,uBAAaA,Y,UAIbT,U,GAAa;AAChBC,gCADgB;AAEhBC;AAFgB,C;kBArCHjB,K","file":"field.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Numbers, hasFirstChild } from '../../utilities';\nimport Checkbox from './../../modules/checkbox/checkbox';\nimport CheckboxFields from './../../modules/checkbox/checkboxfields';\nimport DefaultProps from '../../defaultProps';\n\nexport default class Field extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Grouped field\n         */\n        grouped: PropTypes.bool,\n        /**\n         * A field can have its label next to instead of above it.\n         */\n        inline: PropTypes.bool,\n        /**\n         * Field label\n         */\n        label: PropTypes.string,\n        /**\n         * A field can show that input is mandatory\n         */\n        required: PropTypes.bool,\n        /**\n         * Field state\n         */\n        state: PropTypes.oneOf([\n            'disabled',\n            'error'\n        ]),\n        /**\n         * Field width in columns\n         */\n        width: PropTypes.number\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Checkbox: Checkbox,\n        CheckboxFields: CheckboxFields\n    };\n    /* eslint-enable */\n\n    renderLabel(label) {\n        return (\n            <label key={label + 'Label'}>{label}</label>\n        );\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { children, className, component, defaultClasses, grouped, inline, label, required, state, width, ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n        other.className = classNames(className, this.getClasses());\n\n        return React.createElement(\n            component,\n            other,\n            [\n                hasFirstChild(children, Field.Components.Checkbox) || hasFirstChild(children, Field.Components.CheckboxFields) || !label || label == ''  ? null : this.renderLabel(this.props.label),\n                children\n            ]\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            disabled: this.props.state === 'disabled',\n            error: this.props.state === 'error',\n\n            required: this.props.required,\n            inline: this.props.inline,\n            grouped: this.props.grouped\n        };\n\n        if (this.props.width) {\n            if (this.props.width > 0  && this.props.width <= 16) {\n                classes[Numbers[this.props.width] + ' wide'] = true;\n            }\n        }\n\n        classes.field = this.props.defaultClasses;\n\n        return classes;\n    }\n}\n"]}