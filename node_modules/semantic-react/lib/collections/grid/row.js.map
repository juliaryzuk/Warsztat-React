{"version":3,"sources":["../../../src/components/collections/grid/row.jsx"],"names":["validProps","aligned","valigned","Row","props","component","centered","children","columns","defaultClasses","doubling","equal","stretched","color","only","justified","other","Component","className","getClasses","classes","row","device","Array","isArray","join","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,aAAa;AACfC,aAAS,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CADM;AAEfC,cAAU,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB;AAFK,CAAnB;;AAKA;;;IAGqBC,G;;;;;;;;;;;iCAwDR;AACL;AADK,yBAKD,KAAKC,KALJ;AAAA,gBAGDH,OAHC,UAGDA,OAHC;AAAA,gBAGQI,SAHR,UAGQA,SAHR;AAAA,gBAGmBC,QAHnB,UAGmBA,QAHnB;AAAA,gBAG6BC,QAH7B,UAG6BA,QAH7B;AAAA,gBAGuCC,OAHvC,UAGuCA,OAHvC;AAAA,gBAGgDC,cAHhD,UAGgDA,cAHhD;AAAA,gBAGgEC,QAHhE,UAGgEA,QAHhE;AAAA,gBAG0EC,KAH1E,UAG0EA,KAH1E;AAAA,gBAIDC,SAJC,UAIDA,SAJC;AAAA,gBAIUC,KAJV,UAIUA,KAJV;AAAA,gBAIiBC,IAJjB,UAIiBA,IAJjB;AAAA,gBAIuBC,SAJvB,UAIuBA,SAJvB;AAAA,gBAIkCb,QAJlC,UAIkCA,QAJlC;AAAA,gBAI+Cc,KAJ/C;AAML;;AAEA,gBAAIC,YAAYZ,SAAhB;AACAW,kBAAME,SAAN,GAAkB,0BAAWF,MAAME,SAAjB,EAA4B,KAAKC,UAAL,EAA5B,CAAlB;;AAEA,mBACI;AAAC,yBAAD;AAAeH,qBAAf;AACYT;AADZ,aADJ;AAKH;;;qCAEY;AACT,gBAAIa,UAAU;AACVC,qBAAK,KAAKjB,KAAL,CAAWK,cADN;AAEVH,0BAAU,KAAKF,KAAL,CAAWE,QAFX;AAGVI,0BAAU,KAAKN,KAAL,CAAWM,QAHX;AAIVE,2BAAW,KAAKR,KAAL,CAAWQ,SAJZ;AAKVG,2BAAW,KAAKX,KAAL,CAAWW;AALZ,aAAd;;AAQA,gBAAI,KAAKX,KAAL,CAAWI,OAAX,IAAsB,KAAKJ,KAAL,CAAWI,OAAX,GAAqB,CAA3C,IAAgD,KAAKJ,KAAL,CAAWI,OAAX,IAAsB,EAA1E,EAA8E;AAC1EY,wBAAW,mBAAQ,KAAKhB,KAAL,CAAWI,OAAnB,CAAX,gBAAmD,IAAnD;AACH;;AAEDY,oBAAQ,KAAKhB,KAAL,CAAWS,KAAnB,IAA4B,CAAC,CAAC,KAAKT,KAAL,CAAWS,KAAzC;;AAEA,gBAAI,KAAKT,KAAL,CAAWO,KAAf,EAAsB;AAClBS,wBAAQ,aAAR,IAAyB,IAAzB;AACH;;AAED,gBAAI,KAAKhB,KAAL,CAAWU,IAAf,EAAqB;AACjB,oBAAIQ,eAAJ;AACA,oBAAIC,MAAMC,OAAN,CAAc,KAAKpB,KAAL,CAAWU,IAAzB,CAAJ,EAAoC;AAChCQ,6BAAS,KAAKlB,KAAL,CAAWU,IAAX,CAAgBW,IAAhB,CAAqB,GAArB,CAAT;AACH,iBAFD,MAEO;AACHH,6BAAS,KAAKlB,KAAL,CAAWU,IAApB;AACH;AACD,oBAAIQ,MAAJ,EAAY;AACRF,4BAAWE,MAAX,cAA4B,IAA5B;AACH;AACJ;;AAED,mBAAO,mCAAmBF,OAAnB,EAA4B,KAAKhB,KAAjC,EAAwCJ,UAAxC,EAAoD,EAAEE,UAAU,SAAZ,EAApD,CAAP;AACH;;;;EA1G4B,gBAAMwB,a,UAoD5BC,Y,gBACA,uBAAaA,Y;kBArDHxB,G","file":"row.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport DefaultProps from '../../defaultProps';\nimport classNames from 'classnames';\n\nconst validProps = {\n    aligned: ['right', 'left', 'center'],\n    valigned: ['top', 'middle', 'bottom']\n};\n\n/**\n * Grid row\n */\nexport default class Row extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Horizontal content alignment\n         */\n        aligned: PropTypes.oneOf(['right', 'left', 'center']),\n        /**\n         * Center columns in row\n         */\n        centered: PropTypes.bool,\n        /**\n         * Double column width on tablet and mobile sizes\n         */\n        doubling: PropTypes.bool,\n        /**\n         * Automatically resize elements to split the available width evently\n         */\n        equal: PropTypes.bool,\n        /**\n         * Only visible for types. Could be single type string or array, i.e. only={[\"mobile\",\"tablet\"]}\n         */\n        only: PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\n            ]),\n            PropTypes.arrayOf(PropTypes.oneOf([\n                'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\n            ]))\n        ]),\n        /**\n         * Specify row columns count\n         */\n        columns: PropTypes.number,\n        /**\n         * Stretch content to take up the entire column height\n         */\n        stretched: PropTypes.bool,\n        /**\n         * Row color\n         */\n        color: PropTypes.string,\n        /**\n         * Justified content fits exactly inside the grid column, taking up the entire width from one side to the other\n         */\n        justified: PropTypes.bool,\n        /**\n         * Vertical content alignment\n         */\n        valigned: PropTypes.oneOf(['top', 'middle', 'bottom'])\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let {\n            aligned, component, centered, children, columns, defaultClasses, doubling, equal,\n            stretched, color, only, justified, valigned, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        let Component = component;\n        other.className = classNames(other.className, this.getClasses());\n\n        return (\n            <Component {...other}>\n                       {children}\n            </Component>\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            row: this.props.defaultClasses,\n            centered: this.props.centered,\n            doubling: this.props.doubling,\n            stretched: this.props.stretched,\n            justified: this.props.justified\n        };\n\n        if (this.props.columns && this.props.columns > 0 && this.props.columns <= 16) {\n            classes[`${Numbers[this.props.columns]} column`] = true;\n        }\n\n        classes[this.props.color] = !!this.props.color;\n\n        if (this.props.equal) {\n            classes['equal width'] = true;\n        }\n\n        if (this.props.only) {\n            let device;\n            if (Array.isArray(this.props.only)) {\n                device = this.props.only.join(' ');\n            } else {\n                device = this.props.only;\n            }\n            if (device) {\n                classes[`${device} only`] = true;\n            }\n        }\n\n        return validateClassProps(classes, this.props, validProps, { valigned: 'aligned' });\n    }\n}\n"]}