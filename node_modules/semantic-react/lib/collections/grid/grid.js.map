{"version":3,"sources":["../../../src/components/collections/grid/grid.jsx"],"names":["validProps","aligned","celled","divided","padded","relaxed","reversed","valigned","Grid","props","defaultClasses","centered","columns","container","component","children","doubling","equal","stackable","other","Component","className","getClassNames","classes","ui","grid","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,aAAa;AACfC,aAAS,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CADM;AAEfC,YAAQ,CAAC,YAAD,CAFO;AAGfC,aAAS,CAAC,YAAD,EAAe,YAAf,CAHM;AAIfC,YAAQ,CAAC,cAAD,EAAiB,YAAjB,CAJO;AAKfC,aAAS,CAAC,MAAD,CALM;AAMfC,cAAU,CAAC,QAAD,EAAW,mBAAX,EAAgC,QAAhC,EAA0C,mBAA1C,EAA+D,UAA/D,EAA2E,qBAA3E,CANK;AAOfC,cAAU,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB;AAPK,CAAnB;;AAUA;;;IAGqBC,I;;;;;;;;;;;iCA2ER;AACL;AACA;AAFK,yBAOD,KAAKC,KAPJ;AAAA,gBAIDR,OAJC,UAIDA,OAJC;AAAA,gBAIQS,cAJR,UAIQA,cAJR;AAAA,gBAIwBC,QAJxB,UAIwBA,QAJxB;AAAA,gBAIkCT,MAJlC,UAIkCA,MAJlC;AAAA,gBAI0CU,OAJ1C,UAI0CA,OAJ1C;AAAA,gBAImDC,SAJnD,UAImDA,SAJnD;AAAA,gBAI8DC,SAJ9D,UAI8DA,SAJ9D;AAAA,gBAIyEC,QAJzE,UAIyEA,QAJzE;AAAA,gBAKDZ,OALC,UAKDA,OALC;AAAA,gBAKQa,QALR,UAKQA,QALR;AAAA,gBAKkBC,KALlB,UAKkBA,KALlB;AAAA,gBAKyBb,MALzB,UAKyBA,MALzB;AAAA,gBAKiCC,OALjC,UAKiCA,OALjC;AAAA,gBAK0CC,QAL1C,UAK0CA,QAL1C;AAAA,gBAKoDY,SALpD,UAKoDA,SALpD;AAAA,gBAK+DX,QAL/D,UAK+DA,QAL/D;AAAA,gBAMEY,KANF;AAQL;;;AACA,gBAAMC,YAAYN,SAAlB;AACAK,kBAAME,SAAN,GAAkB,0BAAWF,MAAME,SAAjB,EAA4B,KAAKC,aAAL,EAA5B,CAAlB;AACA,mBACI;AAAC,yBAAD;AACQH,qBADR;AAGKJ;AAHL,aADJ;AAOH;;;wCAEe;AACZ,gBAAIQ,UAAU;AACV;AACAC,oBAAI,KAAKf,KAAL,CAAWC,cAFL;AAGVe,sBAAM,KAAKhB,KAAL,CAAWC,cAHP;;AAKV;AACAG,2BAAW,KAAKJ,KAAL,CAAWI,SANZ;AAOVR,yBAAS,KAAKI,KAAL,CAAWJ,OAPV;AAQVM,0BAAU,KAAKF,KAAL,CAAWE,QARX;AASVO,2BAAW,KAAKT,KAAL,CAAWS,SATZ;AAUVF,0BAAU,KAAKP,KAAL,CAAWO;AAVX,aAAd;;AAaA,gBAAI,KAAKP,KAAL,CAAWG,OAAX,IAAsB,KAAKH,KAAL,CAAWG,OAAX,GAAqB,CAA3C,IAAgD,KAAKH,KAAL,CAAWG,OAAX,IAAsB,EAA1E,EAA8E;AAC1EW,wBAAW,mBAAQ,KAAKd,KAAL,CAAWG,OAAnB,CAAX,gBAAmD,IAAnD;AACH;;AAED,gBAAI,KAAKH,KAAL,CAAWQ,KAAf,EAAsB;AAClBM,wBAAQ,aAAR,IAAyB,IAAzB;AACH;;AAED,mBAAO,mCAAmBA,OAAnB,EAA4B,KAAKd,KAAjC,EAAwCT,UAAxC,EAAoD,EAAEO,UAAU,SAAZ,EAApD,CAAP;AACH;;;;EAtH6B,gBAAMmB,a,UAuE7BC,Y,gBACA,uBAAaA,Y;kBAxEHnB,I","file":"grid.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport DefaultProps from '../../defaultProps';\nimport classNames from 'classnames';\n\nconst validProps = {\n    aligned: ['right', 'left', 'center'],\n    celled: ['internally'],\n    divided: ['vertically', 'internally'],\n    padded: ['horizontally', 'vertically'],\n    relaxed: ['very'],\n    reversed: ['mobile', 'mobile vertically', 'tablet', 'tablet vertically', 'computer', 'computer vertically'],\n    valigned: ['top', 'middle', 'bottom']\n};\n\n/**\n * Semantic Grid\n */\nexport default class Grid extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Horizontal content alignment\n         */\n        aligned: PropTypes.oneOf(['right', 'left', 'center']),\n        /**\n         * Center columns\n         */\n        centered: PropTypes.bool,\n        /**\n         * Divide rows into cells\n         */\n        celled: PropTypes.oneOfType([\n            PropTypes.oneOf(['internally']),\n            PropTypes.bool\n        ]),\n        /**\n         * Grid column count\n         */\n        columns: PropTypes.number,\n        /**\n         * Add container class, i.e. ui grid container\n         */\n        container: PropTypes.bool,\n        /**\n         * Add dividers between ros\n         */\n        divided: PropTypes.oneOfType([\n            PropTypes.oneOf(['vertically', 'internally']),\n            PropTypes.bool\n        ]),\n        /**\n         * Double column width on tablet and mobile sizes\n         */\n        doubling: PropTypes.bool,\n        /**\n         * Automatically resize elements to split the available width evently\n         */\n        equal: PropTypes.bool,\n        /**\n         * Preserve gutters on first and las columns\n         */\n        padded: PropTypes.oneOfType([\n            PropTypes.oneOf(['horizontally', 'vertically']),\n            PropTypes.bool\n        ]),\n        /**\n         * Increase size of gutters\n         */\n        relaxed: PropTypes.oneOfType([\n            PropTypes.oneOf(['very']),\n            PropTypes.bool\n        ]),\n        /**\n         * Reverse the order of columns or rows by device\n         */\n        reversed: PropTypes.oneOfType([\n            'mobile', 'mobile vertically', 'tablet', 'tablet vertically', 'computer', 'computer vertically'\n        ]),\n        /**\n         * Automatically stack rows into single columns on mobile devices\n         */\n        stackable: PropTypes.bool,\n        /**\n         * Vertical content alignment\n         */\n        valigned: PropTypes.oneOf(['top', 'middle', 'bottom'])\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    render() {\n        // consume props\n        /* eslint-disable no-use-before-define */\n        let {\n            aligned, defaultClasses, centered, celled, columns, container, component, children,\n            divided, doubling, equal, padded, relaxed, reversed, stackable, valigned,\n            ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n        const Component = component;\n        other.className = classNames(other.className, this.getClassNames());\n        return (\n            <Component\n                {...other}\n            >\n                {children}\n            </Component>\n        );\n    }\n\n    getClassNames() {\n        let classes = {\n            // Default\n            ui: this.props.defaultClasses,\n            grid: this.props.defaultClasses,\n\n            // variations\n            container: this.props.container,\n            relaxed: this.props.relaxed,\n            centered: this.props.centered,\n            stackable: this.props.stackable,\n            doubling: this.props.doubling\n        };\n\n        if (this.props.columns && this.props.columns > 0 && this.props.columns <= 16) {\n            classes[`${Numbers[this.props.columns]} column`] = true;\n        }\n\n        if (this.props.equal) {\n            classes['equal width'] = true;\n        }\n\n        return validateClassProps(classes, this.props, validProps, { valigned: 'aligned' });\n    }\n}\n"]}