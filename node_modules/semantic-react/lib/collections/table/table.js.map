{"version":3,"sources":["../../../src/components/collections/table/table.jsx"],"names":["validProps","aligned","basic","padded","valigned","Table","props","celled","children","className","collapsing","compact","color","component","defaultClasses","columns","definition","fixed","inverted","selectable","singleLine","size","sortable","stackable","striped","structured","unstackable","width","other","getClasses","mobileFormat","createElement","classes","ui","table","name","options","Object","keys","forEach","value","PureComponent","defaultProps","computer","mobile","tablet"],"mappings":"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","file":"table.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\nlet validProps = {\n    aligned: ['top', 'bottom'],\n    basic: ['very'],\n    padded: ['very'],\n    valigned: ['center', 'right']\n};\n\nexport default class Table extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * A table header, row, or cell can adjust its text alignment\n         */\n        aligned: PropTypes.oneOf(['top', 'bottom']),\n        /**\n         * A table can reduce its complexity to increase readability.\n         */\n        basic: PropTypes.oneOfType([\n            PropTypes.oneOf(['very']),\n            PropTypes.bool\n        ]),\n        /**\n         * A table may be divided each row into separate cells\n         */\n        celled: PropTypes.bool,\n        /**\n         * A cell can be collapsing so that it only uses as much space as required\n         */\n        collapsing: PropTypes.bool,\n        /**\n         * A table can be given a color to distinguish it from other tables.\n         */\n        color: PropTypes.string,\n        /**\n         * A table can specify its column count to divide its content evenly\n         */\n        columns: PropTypes.number,\n        /**\n         * A table may sometimes need to be more compact to make more rows visible at a time\n         */\n        compact: PropTypes.oneOfType([\n            PropTypes.oneOf(['very']),\n            PropTypes.bool\n        ]),\n        definition: PropTypes.bool,\n        /**\n         * A table can use table-layout: fixed a special faster form of table rendering that does not resize table cells based on content.\n         */\n        fixed: PropTypes.bool,\n        /**\n         * A table's colors can be inverted\n         */\n        inverted: PropTypes.bool,\n        /**\n         * A table may sometimes need to be more padded for legibility\n         */\n        padded: PropTypes.oneOfType([\n            PropTypes.oneOf(['very']),\n            PropTypes.bool\n        ]),\n        /**\n         * A table can have its rows appear selectable\n         */\n        selectable: PropTypes.bool,\n        /**\n         * A table can specify that its cell contents should remain on a single line, and not wrap.\n         */\n        singleLine: PropTypes.bool,\n        /**\n         * A table can also be small or large\n         */\n        size: PropTypes.string,\n        /**\n         * A table may allow a user to sort contents by clicking on a table header.\n         * NOTE: You need to set \"sorted descending\"/\"sorted ascending\" class names for corresponding <th> element\n         */\n        sortable: PropTypes.bool,\n        /**\n         * A table can specify how it stacks table content responsively\n         */\n        stackable: PropTypes.shape({\n            computer: PropTypes.bool,\n            mobile: PropTypes.bool,\n            tablet: PropTypes.bool\n        }),\n        /**\n         * A table can stripe alternate rows of content with a darker color to increase contrast\n         */\n        striped: PropTypes.bool,\n        /**\n         * A table can be formatted to display complex structured data\n         */\n        structured: PropTypes.bool,\n        /**\n         * Reverse of stackable\n         */\n        unstackable: PropTypes.shape({\n            computer: PropTypes.bool,\n            mobile: PropTypes.bool,\n            tablet: PropTypes.bool\n        }),\n        /**\n         * A table header, row, or cell can adjust its vertical alignment\n         */\n        valigned: PropTypes.oneOf(['center', 'right']),\n        /**\n         * Table width in grid columns\n         */\n        width: PropTypes.number\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        component: 'table',\n        stackable: {\n            computer: false,\n            mobile: false,\n            tablet: false\n        },\n        unstackable: {\n            computer: false,\n            mobile: false,\n            tablet: false\n        }\n    };\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { aligned, basic, celled, children, className, collapsing, compact, color, component,\n            defaultClasses, columns, definition, fixed, inverted, padded, selectable, singleLine,\n            size, sortable, stackable, striped, structured, unstackable, valigned, width,\n            ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        other.className = classNames(\n            className,\n            this.getClasses(),\n            this.mobileFormat('stackable', stackable),\n            this.mobileFormat('unstackable', unstackable)\n        );\n\n        return React.createElement(\n            component,\n            other,\n            children\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            ui: this.props.defaultClasses,\n\n            basic: this.props.basic,\n            collapsing: this.props.collapsing,\n            compact: this.props.compact,\n            celled: this.props.celled,\n            definition: this.props.definition,\n            fixed: this.props.fixed,\n            inverted: this.props.inverted,\n            selectable: this.props.selectable,\n            'single line': this.props.singleLine,\n            sortable: this.props.sortable,\n            striped: this.props.striped,\n            structured: this.props.structured,\n\n            table: this.props.defaultClasses\n        }\n\n        classes[this.props.color] = !!this.props.color;\n        classes[this.props.size] = !!this.props.size;\n\n        if (this.props.columns !== false) {\n            if (this.props.columns > 0 && this.props.columns <= 16) {\n                classes[Numbers[this.props.columns] + ' column'] = true;\n            }\n        }\n\n        if (this.props.width !== false) {\n            if (this.props.width > 0 && this.props.width <= 16) {\n                classes[Numbers[this.props.width] + ' wide'] = true;\n            }\n        }\n\n        return validateClassProps(classes, this.props, validProps, { valigned: 'aligned' });\n    }\n\n    mobileFormat(name, options) {\n        let classes = {};\n\n        Object.keys(options).forEach(value => {\n            if (options[value])\n                classes[value + ' ' + name] = true;\n        });\n\n        // all of the options are true?\n        return classes;\n    }\n}\n"]}