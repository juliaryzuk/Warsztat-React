{"version":3,"sources":["../../../src/components/views/menu/menu.jsx"],"names":["validProps","attached","fixed","fitted","floated","Menu","onMenuItemClick","value","event","props","menuValue","Array","isArray","indexOf","onMenuChange","filter","val","isMenuChild","Children","map","children","child","cloneElement","active","isActiveItem","key","onClick","borderless","color","component","defaultClasses","even","fluid","inverted","pagination","pointing","secondary","tabular","text","vertical","other","className","getClasses","Component","renderChildren","childCount","count","classes","ui","context","isDropdownChild","left","right","top","bottom","item","menu","PureComponent","contextTypes","bool","childContextTypes","defaultProps"],"mappings":"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","file":"menu.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\nlet validProps = {\n    attached: ['top', 'bottom'],\n    fixed: ['top', 'bottom', 'right', 'left'],\n    fitted: ['horizontally', 'vertically'],\n    floated: ['right', 'left']\n};\n\n/**\n * Menu. Could be simple or controlled. Controlled menu will be activated by providing value property and will manage\n * current active item and fire onChange callback when value was changed\n */\nexport default class Menu extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * A menu may be attached to other content segments\n         */\n        attached: PropTypes.oneOf(['top', 'bottom']),\n        /**\n         * A menu item or menu can have no borders\n         */\n        borderless: PropTypes.bool,\n        /**\n         * Use equal width for menu items\n         */\n        even: PropTypes.bool,\n        /**\n         * A menu item or menu can remove element padding, vertically or horizontally\n         */\n        fitted: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.oneOf(['horizontally', 'vertically'])\n        ]),\n        /**\n         * A menu can be fixed to a side of its context\n         */\n        fixed: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.oneOf(['right', 'left', 'top', 'bottom'])\n        ]),\n        /**\n         * Float left or right\n         */\n        floated: PropTypes.oneOf(['right', 'left']),\n        /**\n         * A vertical menu may take the size of its container. (A horizontal menu does this by default)\n         */\n        fluid: PropTypes.bool,\n        /**\n         * A menu can be formatted with different colors\n         */\n        color: PropTypes.string,\n        /**\n         * A menu may have its colors inverted to show greater contrast\n         */\n        inverted: PropTypes.bool,\n        /**\n         * Menu active value\n         */\n        menuValue: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\n        ]),\n        /**\n         * Callback for active item change. Will not be fired if menuValue was omitted\n         * Will pass new menuValue or array of new menuValue\n         * If all items were unselected would pass null if menuValue is single value or empty array if menuValue is array\n         */\n        onMenuChange: PropTypes.func,\n        /**\n         * Callback for menu item click\n         */\n        onMenuItemClick: PropTypes.func,\n        /**\n         * A pagination menu is specially formatted to present links to pages of content\n         */\n        pagination: PropTypes.bool,\n        /**\n         * A menu can point to show its relationship to nearby content\n         */\n        pointing: PropTypes.bool,\n        /**\n         * A menu can adjust its appearance to de-emphasize its contents\n         */\n        secondary: PropTypes.bool,\n        /**\n         * A menu can be formatted to show tabs of information\n         */\n        tabular: PropTypes.bool,\n        /**\n         * A menu can be formatted for text content\n         */\n        text: PropTypes.bool,\n        /**\n         * A vertical menu displays elements vertically..\n         */\n        vertical: PropTypes.bool\n    };\n\n    static contextTypes = {\n        isMenuChild: PropTypes.bool,\n        isDropdownChild: PropTypes.bool\n    };\n\n    static childContextTypes = {\n        isMenuChild: PropTypes.bool\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        onMenuItemClick: () => {},\n        onMenuChange: () => {}\n    };\n\n    getChildContext() {\n        return {\n            isMenuChild: true\n        };\n    }\n\n    onMenuItemClick = (value, event) => {\n        this.props.onMenuItemClick(value, event);\n        // Call onMenuChange callback when needed\n        if (typeof this.props.menuValue !== 'undefined') {\n            // Multiple menu selection\n            if (Array.isArray(this.props.menuValue)) {\n                if (this.props.menuValue.indexOf(value) !== -1) {\n                    // Unselect menu item\n                    this.props.onMenuChange(this.props.menuValue.filter(val => val !== value));\n                } else {\n                    // select menu item\n                    this.props.onMenuChange([...this.props.menuValue, value]);\n                }\n                // Single menu selection\n            } else {\n                // calling with null if clicking on same item, because we might want to unselect menu item\n                this.props.onMenuChange(this.props.menuValue !== value ? value : null);\n            }\n        }\n    };\n\n    renderChildren() {\n        // should deep traverse?\n        return React.Children.map(this.props.children, child => {\n            // It may be empty\n            if (!child) return child;\n\n            // Process if a child has menuValue property\n            if (typeof child.props.menuValue !== 'undefined') {\n                return React.cloneElement(child, {\n                    // If child has active property, then pass it\n                    active: (typeof child.props.active !== 'undefined') ? child.props.active : this.isActiveItem(child.props.menuValue),\n                    key: child.props.menuValue,\n                    onClick: this.onMenuItemClick\n                });\n            } else {\n                // Menu could contain non items, for example divider, pass it untouched (only add key)\n                return React.cloneElement(child, {\n                    key: (typeof child.key !== 'undefined') ? child.key : child.props.children\n                });\n            }\n        });\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { attached, borderless, color, component, defaultClasses, even, fitted, fixed, fluid, floated, inverted, pagination,\n            pointing, secondary, tabular, text, vertical,\n            menuValue, onMenuChange, onMenuItemClick, ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        other.className = classNames(this.props.className, this.getClasses());\n        const Component = component;\n\n        return (\n            <Component {...other}>\n                {this.renderChildren()}\n            </Component>\n        );\n    }\n\n    /**\n     * Returns true if it should be active item\n     * @param value\n     */\n    isActiveItem(value) {\n        if (typeof value === 'undefined') return false;\n        if (typeof this.props.menuValue === 'undefined') return false;\n        if (Array.isArray(this.props.menuValue) && this.props.menuValue.indexOf(value) !== -1) return true;\n        return !!(!Array.isArray(this.props.menuValue) && this.props.menuValue === value);\n    }\n\n    getClasses() {\n        let childCount = React.Children.count(this.props.children);\n\n        let classes = {\n            // default\n            ui: this.props.defaultClasses && !this.context.isMenuChild && !this.context.isDropdownChild,\n\n            // numbers\n\n            // position\n            left: false,\n            right: false,\n            top: false,\n            bottom: false,\n\n            // variations\n            item: this.props.even && childCount > 0,\n            borderless: this.props.borderless,\n            attached: this.props.attached,\n            floated: this.props.floated,\n            inverted: this.props.inverted,\n            pagination: this.props.pagination,\n            pointing: this.props.pointing,\n            secondary: this.props.secondary,\n            tabular: this.props.tabular,\n            vertical: this.props.vertical,\n            fluid: this.props.fluid,\n            fixed: this.props.fixed,\n            fitted: this.props.fitted,\n            text: this.props.text,\n\n            // dropdown\n            // visible: this.context.isDropdownChild,\n            // transition: this.context.isDropdownChild,\n\n            // component\n            menu: this.props.defaultClasses\n        };\n\n        classes[this.props.color] = !!this.props.color;\n        classes[this.props.floated] = !!this.props.floated;\n\n        if (this.props.even && childCount > 0) {\n            if (childCount > 0  && childCount <= 12) {\n                classes[Numbers[childCount]] = true;\n            }\n        }\n\n        return validateClassProps(classes, this.props, validProps);\n    }\n}\n"]}