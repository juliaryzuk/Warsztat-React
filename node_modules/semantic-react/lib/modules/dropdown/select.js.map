{"version":3,"sources":["../../../src/components/modules/dropdown/select.jsx"],"names":["Select","props","onOutsideDropdownClick","event","active","onRequestClose","element","findDOMNode","target","onMenuItemClick","value","search","selected","multiple","onSelectChange","onSearchStringChange","optionsCount","menuRef","Children","count","children","indexOf","searchRef","focus","onSearchInputChange","onSearchInputKeyDown","allowAdditions","searchString","which","noResultsMessageRef","child","toArray","values","length","slice","labelStyle","display","index","filter","val","name","join","map","onLabelCloseIconClick","bind","placeholder","selection","content","forEach","icon","searchGlyphWidth","searchPosition","searchWidth","style","width","ref","searchHeader","searchIgnoreCase","searchRegex","RegExp","newChildren","match","Number","parseInt","test","push","cloneElement","key","menuValue","searchNoResultsMessage","allowAdditionsMessage","other","menuChildren","renderSearchHeader","renderSearchInput","filteredChild","renderFilteredChildren","concat","enter","leave","enterDuration","leaveDuration","className","getClasses","document","renderDropdownInput","renderDropdownLabels","renderDropdownText","renderDropdownIcon","renderMenu","PureComponent","defaultProps","Components","Label","Icon","Header","Menu","DropdownElement"],"mappings":"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","file":"select.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport EventListener from 'react-event-listener';\nimport DropdownElement from './dropdownelement';\nimport Label from './../../elements/label/label';\nimport Icon from './../../elements/icon/icon';\nimport Header from './../../elements/header/header';\nimport Menu from './../../views/menu/menu';\nimport { isNodeInRoot } from '../../utilities';\nimport SemanticCSSTransition from '../../animation/animation';\nimport AnimationProps from '../../animation/animationProps';\n\n\n/**\n * Select is the dropdown where options could be selected, either single or multiple.\n * Also supports search\n */\nexport default class Select extends React.PureComponent {\n    static propTypes = {\n        ...DropdownElement.propTypes,\n        ...AnimationProps.propTypes,\n        /**\n         * Should be dropdown opened\n         */\n        active: PropTypes.bool,\n        /**\n         * Name for dropdown input\n         */\n        name: PropTypes.string,\n        /**\n         * Icon name for dropdown\n         */\n        icon: PropTypes.string,\n        /**\n         * String used as placeholder if dropdown has no selected value\n         * Will be grayed (<div class=\"default text\">) if dropdown is selection\n         * or normally displayed (<div class=\"text\">) otherwise\n         */\n        placeholder: PropTypes.string,\n        /**\n         * Searchable dropdown\n         */\n        search: PropTypes.bool,\n        /**\n         * Search glyph width\n         */\n        searchGlyphWidth: PropTypes.number,\n        /**\n         * Ignore case when performing search\n         */\n        searchIgnoreCase: PropTypes.bool,\n        /**\n         * Search box position\n         */\n        searchPosition: PropTypes.oneOf([\n            'dropdown', 'menu'\n        ]),\n        /**\n         * Search header, valid only for searchPosition=\"menu\"\n         */\n        searchHeader: PropTypes.string,\n        /**\n         * Specify message which will be displayed when search has no results\n         */\n        searchNoResultsMessage: PropTypes.string,\n        /**\n         * Specify message which will be displayed when search has no results and allowAdditions enabled\n         */\n        allowAdditionsMessage: PropTypes.string,\n        /**\n         * Search string\n         */\n        searchString: PropTypes.string,\n        /**\n         * Selected value\n         */\n        selected: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n        /**\n         * Behave dropdown as HTML select\n         */\n        selection: PropTypes.bool,\n        /**\n         * Allow multiple selection\n         */\n        multiple: PropTypes.bool,\n        /**\n         * Allow to add custom options\n         */\n        allowAdditions: PropTypes.bool,\n        /**\n         * Callback will be called when current selected value was changed.\n         * Will pass array of new selected values as first param and total options count as second\n         */\n        onSelectChange: PropTypes.func,\n        /**\n         * Callback will be called when selection dropdown wants to be closed. For now only for outside of dropdown clicks\n         */\n        onRequestClose: PropTypes.func,\n        /**\n         * Callback will be called when search string is being changed. You probably just need to pass it back to component\n         */\n        onSearchStringChange: PropTypes.func\n\n    };\n\n    static defaultProps = {\n        ...DropdownElement.defaultProps,\n        ...AnimationProps.defaultProps,\n        active: false,\n        icon: 'dropdown',\n        search: false,\n        searchGlyphWidth: 1.0714,\n        searchPosition: 'dropdown',\n        searchIgnoreCase: true,\n        searchNoResultsMessage: 'No Results found.',\n        allowAdditionsMessage: 'Press enter to add.',\n        searchString: '',\n        selection: true,\n        selected: [],\n        multiple: false,\n        allowAdditions: false,\n        enter: \"slide down in\",\n        leave: \"slide down out\",\n        enterDuration: 200,\n        leaveDuration: 200,\n        onSelectChange: () => {},\n        onRequestClose: () => {},\n        onSearchStringChange: () => {}\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Label: Label,\n        Icon: Icon,\n        Header: Header,\n        Menu: Menu,\n        DropdownElement: DropdownElement\n    };\n    /* eslint-enable */\n\n    constructor(props) {\n        super(props);\n\n        /**\n         * Menu reference\n         */\n        this.menuRef = null;\n        this.searchRef = null;\n        this.noResultsMessageRef = null;\n\n        this.labelStyle = { display: 'block' };\n    }\n\n    componentDidMount() {\n        const { active, search } = this.props;\n        if (search && this.searchRef && active) {\n            this.searchRef.focus();\n        }\n    }\n\n    componentDidUpdate() {\n        const { active, search } = this.props;\n        if (search && this.searchRef && active) {\n            this.searchRef.focus();\n        }\n    }\n\n    /**\n     * Handler for outside click\n     */\n    onOutsideDropdownClick = (event) => {\n        const { active, onRequestClose } = this.props;\n        if (!active) {\n            return;\n        }\n        const element = ReactDOM.findDOMNode(this);\n        if (element) {\n            if (!isNodeInRoot(event.target, element)) {\n                onRequestClose();\n            }\n        }\n    };\n\n    /**\n     * Handler for menu item click\n     * @param value\n     */\n    onMenuItemClick = (value) => {\n        let { search, selected, multiple, onSelectChange, onSearchStringChange } = this.props;\n        const optionsCount = (this.menuRef) ? React.Children.count(this.menuRef.props.children) : 0;\n        if (selected.indexOf(value) === -1) {\n            if (multiple) {\n                // Append value for multiple\n                onSelectChange([...selected, value], optionsCount);\n            } else {\n                // replace for single\n                onSelectChange([value], optionsCount);\n            }\n\n            // Intelligently handle multiple select here:\n            // Do not request close if selecting and there are more than 1 element left in menu\n            // Set focus to search box if searchable\n            // Close if menu has only 1 element\n            if (multiple && this.menuRef) {\n                if (optionsCount <= 1) {\n                    // Clean search string\n                    onSearchStringChange('');\n                } else if (search && this.searchRef) {\n                    // we have few more elements here, put focus if searchable\n                    this.searchRef.focus();\n                }\n            } else if (this.searchRef) {\n                // always clean search string for single selection dropdowns\n                onSearchStringChange('');\n            }\n        }\n    };\n\n    /**\n     * Handler for close label click\n     * @param value\n     */\n    onLabelCloseIconClick(value) {\n        const { selected, onSelectChange } = this.props;\n        const optionsCount = (this.menuRef) ? React.Children.count(this.menuRef.props.children) : 0;\n        const index = selected.indexOf(value);\n        if (index !== -1) {\n            onSelectChange([...selected.filter(val => val !== value)], optionsCount);\n        }\n    }\n\n    /**\n     * Handler for search input change\n     * @param {React.KeyboardEvent} event\n     */\n    onSearchInputChange = (event) => {\n        const { onSearchStringChange } = this.props;\n\n        onSearchStringChange(event.target.value);\n    };\n\n    /**\n     * Handler for search input key events\n     * @param {React.KeyboardEvent} event\n     */\n    onSearchInputKeyDown = (event) => {\n        const { allowAdditions, searchString, onSelectChange, selected, multiple, onSearchStringChange } = this.props;\n        switch (event.which) {\n            // Enter\n            case 13:\n                // only do something if we have search results available and not displaying not results message\n                if (this.menuRef ) {\n                    if (!this.noResultsMessageRef && React.Children.count(this.menuRef.props.children) > 0) {\n                        // get the first children\n                        let child = React.Children.toArray(this.menuRef.props.children)[0];\n                        if (child && child.props.value) {\n                            // enter should do the same as menu item click\n                            this.onMenuItemClick(child.props.value);\n                        }\n                    }\n                    if (allowAdditions) {\n                        if (multiple) {\n                            // Append value for multiple\n                            const values = [...selected, searchString];\n                            onSelectChange(values, values.length);\n                            onSearchStringChange('');\n                        } else {\n                            // replace for single\n                            onSelectChange([searchString], 1);\n                            onSearchStringChange('');\n                        }\n                    }\n                }\n                break;\n            // Backspace\n            case 8:\n                if (searchString === '') {\n                    if (multiple && selected.length > 0) {\n                        onSelectChange([...selected.slice(0, -1)]);\n                    }\n                }\n                break;\n        }\n    };\n\n    /**\n     * Renders dropdown hidden input\n     */\n    renderDropdownInput() {\n        const { name, selected } = this.props;\n        const value = selected.join(',');\n\n        return (\n            <input name={name}\n                   type=\"hidden\"\n                   value={value}/>\n        );\n    }\n\n    /**\n     * Renders dropdown labels for multiple type dropdowns\n     */\n    renderDropdownLabels() {\n        const { multiple, selected } = this.props;\n        // Selection labels should appear only for multiple dropdowns\n        if (!multiple) {\n            return null;\n        }\n\n        return React.Children.map(this.props.children, child => {\n            // Process only option or option like childs and if it's selected\n            if (child && child.props && selected.indexOf(child.props.value) !== -1) {\n                return (\n                    <SemanticCSSTransition\n                        enter=\"in scale\"\n                        leave={false}\n                        enterDuration={200}\n                        runOnMount\n                    >\n                        <Select.Components.Label component=\"a\"\n                                                 key={`label-${child.props.value}`}\n                                                 style={this.labelStyle}\n                        >\n                            {child.props.children}\n                            <Select.Components.Icon name=\"close\"\n                                                    onClick={this.onLabelCloseIconClick.bind(this, child.props.value)}/>\n                        </Select.Components.Label>\n                    </SemanticCSSTransition>\n                );\n            }\n        });\n    }\n\n    /**\n     * Render dropdown placeholder text\n     */\n    renderDropdownText() {\n        /* eslint-disable no-use-before-define */\n        const { multiple, placeholder, search, selected, searchString, selection } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        // Render placeholder if not selected anything or multiple\n        if (searchString.length === 0 && (selected.length === 0 || multiple)) {\n            if (typeof placeholder !== 'undefined') {\n                // Selection type should use default text, non selection text\n                return (\n                    <div className={selection ? 'default text' : 'text'}>{placeholder}</div>\n                )\n            } else {\n                return null;\n            }\n        } else {\n            // Single selection here\n            // Render selected children in text div here if selected anything\n            let content = <div className=\"text filtered\"/>;\n            // Do not render when performing search\n            if (!search || !searchString) {\n                // traverse in childs, find necessary node\n                React.Children.forEach(this.props.children, child => {\n                    if (child && child.props && typeof child.props.value !== 'undefined' && selected.indexOf(child.props.value) !== -1) {\n                        content = <div className=\"text\">{child.props.children}</div>\n                    }\n                });\n            }\n            return content;\n        }\n    }\n\n    /**\n     * Renders dropdown icon\n     */\n    renderDropdownIcon() {\n        const { icon } = this.props;\n        return (\n            <Select.Components.Icon name={icon}/>\n        )\n    }\n\n    /**\n     * Renders search input\n     */\n    renderSearchInput() {\n        const { search, searchGlyphWidth, searchString, searchPosition, multiple } = this.props;\n\n        // Do not render if not searchable\n        if (!search) {\n            return null;\n        }\n\n        const searchWidth = searchGlyphWidth * searchString.length;\n        // single selection dropdown shouldn't apply width style\n        const style = searchWidth && searchPosition === 'dropdown' && multiple ? { width: `${searchWidth}em` } : {};\n        if (searchPosition === 'dropdown') {\n            return (\n                <input autoComplete=\"off\"\n                       className=\"search\"\n                       key=\"searchInput\"\n                       onChange={this.onSearchInputChange}\n                       onKeyDown={this.onSearchInputKeyDown}\n                       ref={ref => this.searchRef = ref}\n                       style={style}\n                       tabIndex={0}\n                       value={searchString}/>\n            )\n        } else {\n            // Search in menu has slightly different layout\n            return (\n                <div className=\"ui icon search input\">\n                    <Select.Components.Icon name=\"search\"/>\n                    <input key=\"searchInput\"\n                           onChange={this.onSearchInputChange}\n                           onKeyDown={this.onSearchInputKeyDown}\n                           placeholder=\"Search...\"\n                           ref={ref => this.searchRef = ref}\n                           tabIndex={0}\n                           type=\"text\"\n                           value={searchString}/>\n                </div>\n            )\n        }\n    }\n\n    /**\n     * Renders search header if specified\n     */\n    renderSearchHeader() {\n        const { search, searchHeader } = this.props;\n        if (search && searchHeader) {\n            return (<Select.Components.Header key=\"searchHeader\">{searchHeader}</Select.Components.Header>);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Filters children options to exclude selected elements or elements which doesn't match to search\n     */\n    renderFilteredChildren() {\n        const { search, searchIgnoreCase, selected, searchString, multiple } = this.props;\n        const searchRegex = new RegExp(searchString, searchIgnoreCase ? 'gi' : 'g');\n\n        let newChildren = [];\n        React.Children.forEach(this.props.children, child => {\n            // only process option like childs\n            if (!child) {\n                return;\n            }\n            if (typeof child.props.value !== 'undefined') {\n                let match = true;\n                if (search && searchString !== '') {\n                    // value could be int or string. In case of int convert it to string\n                    const value = (typeof child.props.value === 'number') ? Number.parseInt(child.props.value) : child.props.value;\n                    match = (searchRegex.test(value) || searchRegex.test(child.props.children));\n                }\n\n                // Match for non search selection will be always true\n                if (match) {\n                    // For multiple type render only non selected options\n                    if (multiple && selected.indexOf(child.props.value) === -1) {\n                        newChildren.push(React.cloneElement(\n                            child,\n                            {\n                                key: child.key ? child.key : child.props.value,\n                                // need to pass menu value, otherwise menu will not bind handler\n                                menuValue: child.props.value\n                            }\n                        ));\n                    } else if (!multiple) {\n                        // for single selection render all options but add selected value\n                        newChildren.push(React.cloneElement(\n                            child,\n                            {\n                                active: (selected.indexOf(child.props.value) !== -1),\n                                key: child.key ? child.key : child.props.value,\n                                // need to pass menu value, otherwise menu will not bind handler\n                                menuValue: child.props.value\n                            }\n                        ));\n                    }\n                }\n            } else if (searchString === '') {\n                // need to pass non option like childs, but only if search string is empty\n                newChildren.push(React.cloneElement(\n                    child,\n                    {\n                        key: child.key ? child.key : child.props.value\n                    }\n                ));\n            }\n        });\n        return newChildren;\n    }\n\n    /**\n     * Render menu\n     */\n    renderMenu() {\n        /* eslint-disable no-use-before-define */\n        const {\n            active, search, searchPosition, searchHeader, searchString,\n                  searchNoResultsMessage, allowAdditions, allowAdditionsMessage, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n        // make new array for menu childrens\n        let menuChildren = [];\n        // render search and header in menu\n        if (search && searchPosition === 'menu') {\n            if (searchHeader) {\n                menuChildren.push(this.renderSearchHeader());\n            }\n            menuChildren.push(this.renderSearchInput());\n        }\n\n        let filteredChild = this.renderFilteredChildren();\n        // Display no results message instead of children if needed\n        if ((!filteredChild || filteredChild.length === 0) && (search && searchString != '')) {\n            filteredChild = [\n                <div className=\"message\"\n                     key=\"noResultsMessage\"\n                     ref={ref => this.noResultsMessageRef = ref}\n                >\n                    {allowAdditions ? allowAdditionsMessage : searchNoResultsMessage}\n                </div>\n            ]; // eslint-disable-line\n        }\n\n        menuChildren = menuChildren.concat(filteredChild);\n\n        return (\n            <Select.Components.Menu\n                key=\"menu\"\n                onMenuItemClick={this.onMenuItemClick}\n                ref={ref => this.menuRef = ref}\n            >\n                {menuChildren}\n            </Select.Components.Menu>\n        );\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        const {\n            active, children, enter, leave, enterDuration, leaveDuration, icon, name, search, searchPosition, searchHeader,\n            searchString, searchGlyphWidth, searchIgnoreCase, searchNoResultsMessage, allowAdditionsMessage, allowAdditions, placeholder, selected, selection,\n            multiple, onSelectChange, onRequestClose, onSearchStringChange, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        other.className = classNames(other.className, this.getClasses());\n\n        return (\n            <Select.Components.DropdownElement\n                {...other}\n                active={active}\n            >\n                {/* This will embed <noscript></noscript> inside dropdown div. Shouldn't cause any problems */}\n                <EventListener target={document}\n                               onMouseDown={this.onOutsideDropdownClick}\n                               onTouchStart={this.onOutsideDropdownClick}/>\n                {this.renderDropdownInput()}\n                {this.renderDropdownLabels()}\n                {this.renderDropdownText()}\n                {this.renderDropdownIcon()}\n                {search && searchPosition === 'dropdown' &&\n                this.renderSearchInput()\n                }\n                <SemanticCSSTransition\n                    enter={enter}\n                    leave={leave}\n                    enterDuration={enterDuration}\n                    leaveDuration={leaveDuration}\n                >\n                    {active && this.renderMenu()}\n                </SemanticCSSTransition>\n            </Select.Components.DropdownElement>\n        );\n    }\n\n    getClasses() {\n        return {\n            search: this.props.search,\n            selection: this.props.selection,\n            multiple: this.props.multiple\n        }\n    }\n}\n"]}