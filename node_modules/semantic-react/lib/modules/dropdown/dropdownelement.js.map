{"version":3,"sources":["../../../src/components/modules/dropdown/dropdownelement.jsx"],"names":["validProps","pointing","DropdownElement","isDropdownChild","props","active","component","children","defaultClasses","compact","disabled","error","loading","fluid","inline","floating","scrolling","other","className","getClasses","Component","classes","ui","dropdown","PureComponent","childContextTypes","bool","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,aAAa;AACfC,cAAU,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,EAA8B,WAA9B,EAA2C,aAA3C,EAA0D,cAA1D;AADK,CAAnB;;AAIA;;;IAGqBC,e;;;;;;;;;;;0CA4DC;AACd,mBAAO;AACHC,iCAAiB;AADd,aAAP;AAGH;;;iCAEQ;AACL;AADK,yBAKD,KAAKC,KALJ;AAAA,gBAGDC,MAHC,UAGDA,MAHC;AAAA,gBAGOC,SAHP,UAGOA,SAHP;AAAA,gBAGkBC,QAHlB,UAGkBA,QAHlB;AAAA,gBAG4BC,cAH5B,UAG4BA,cAH5B;AAAA,gBAG4CC,OAH5C,UAG4CA,OAH5C;AAAA,gBAGqDC,QAHrD,UAGqDA,QAHrD;AAAA,gBAG+DC,KAH/D,UAG+DA,KAH/D;AAAA,gBAGsEC,OAHtE,UAGsEA,OAHtE;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAIMC,MAJN,UAIMA,MAJN;AAAA,gBAIcC,QAJd,UAIcA,QAJd;AAAA,gBAIwBd,QAJxB,UAIwBA,QAJxB;AAAA,gBAIkCe,SAJlC,UAIkCA,SAJlC;AAAA,gBAIgDC,KAJhD;AAML;;AAEAA,kBAAMC,SAAN,GAAkB,0BAAWD,MAAMC,SAAjB,EAA4B,KAAKC,UAAL,EAA5B,CAAlB;;AAEA,gBAAIC,YAAYd,SAAhB;;AAEA,mBACI;AAAC,yBAAD;AAAeW,qBAAf;AACKV;AADL,aADJ;AAKH;;;qCAEY;AACT,gBAAIc,UAAU;AACVC,oBAAI,KAAKlB,KAAL,CAAWI,cADL;AAEVe,0BAAU,KAAKnB,KAAL,CAAWI,cAFX;;AAIVH,wBAAQ,KAAKD,KAAL,CAAWC,MAJT;AAKVI,yBAAS,KAAKL,KAAL,CAAWK,OALV;AAMVC,0BAAU,KAAKN,KAAL,CAAWM,QANX;AAOVC,uBAAO,KAAKP,KAAL,CAAWO,KAPR;AAQVC,yBAAS,KAAKR,KAAL,CAAWQ,OARV;AASVC,uBAAO,KAAKT,KAAL,CAAWS,KATR;AAUVE,0BAAU,KAAKX,KAAL,CAAWW,QAVX;AAWVD,wBAAQ,KAAKV,KAAL,CAAWU,MAXT;AAYVb,0BAAU,KAAKG,KAAL,CAAWH,QAZX;AAaVe,2BAAW,KAAKZ,KAAL,CAAWY;AAbZ,aAAd;;AAgBA,mBAAO,mCAAmBK,OAAnB,EAA4B,KAAKjB,KAAjC,EAAwCJ,UAAxC,CAAP;AACH;;;;EAvGwC,gBAAMwB,a,UAkDxCC,iB,GAAoB;AACvBtB,qBAAiB,oBAAUuB;AADJ,C,SAIpBC,Y,gBACA,uBAAaA,Y;AAChBtB,YAAQ;;kBAxDKH,e","file":"dropdownelement.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { validateClassProps } from '../../utilities';\nimport DefaultProps  from '../../defaultProps';\n\nconst validProps = {\n    pointing: ['left', 'right', 'top left', 'top right', 'bottom left', 'bottom right']\n};\n\n/**\n * Dropdown element. Base for Select and DropdownMenu.\n */\nexport default class DropdownElement extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Indicates status of dropdown. true for opened, false for closed\n         */\n        active: PropTypes.bool,\n        /**\n         * A compact dropdown has no minimum width\n         */\n        compact: PropTypes.bool,\n        /**\n         * A disabled dropdown menu or item does not allow user interaction\n         */\n        disabled: PropTypes.bool,\n        /**\n         * An errored dropdown can alert a user to a problem\n         */\n        error: PropTypes.bool,\n        /**\n         * A dropdown can take the full width of its parent\n         */\n        fluid: PropTypes.bool,\n        /**\n         * A dropdown can be formatted to appear inline in other content\n         */\n        inline: PropTypes.bool,\n        /**\n         * A dropdown menu can appear to be floating below an element.\n         */\n        floating: PropTypes.bool,\n        /**\n         * A dropdown can show that it is currently loading data\n         */\n        loading: PropTypes.bool,\n        /**\n         * A dropdown can be formatted so that its menu is pointing\n         */\n        pointing: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.oneOf([\n                'left', 'right', 'top left', 'top right', 'bottom left', 'bottom right'\n            ])\n        ]),\n        /**\n         * A dropdown can have its menu scroll\n         */\n        scrolling: PropTypes.bool\n    };\n\n    static childContextTypes = {\n        isDropdownChild: PropTypes.bool\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        active: false\n    };\n\n\n    getChildContext() {\n        return {\n            isDropdownChild: true\n        };\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { \n            active, component, children, defaultClasses, compact, disabled, error, loading,\n            fluid, inline, floating, pointing, scrolling, ...other \n        } = this.props;\n        /* eslint-enable no-use-before-define */\n        \n        other.className = classNames(other.className, this.getClasses());\n\n        let Component = component;\n        \n        return (\n            <Component {...other}>\n                {children}\n            </Component>\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            ui: this.props.defaultClasses,\n            dropdown: this.props.defaultClasses,\n            \n            active: this.props.active,\n            compact: this.props.compact,\n            disabled: this.props.disabled,\n            error: this.props.error,\n            loading: this.props.loading,\n            fluid: this.props.fluid,\n            floating: this.props.floating,\n            inline: this.props.inline,\n            pointing: this.props.pointing,\n            scrolling: this.props.scrolling\n        };\n        \n        return validateClassProps(classes, this.props, validProps);\n    }\n}\n"]}