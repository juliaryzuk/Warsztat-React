{"version":3,"sources":["../../../src/components/modules/dropdown/dropdownmenu.jsx"],"names":["DropdownMenu","onOutsideDropdownClick","e","props","active","onRequestClose","dropdownElement","findDOMNode","target","component","icon","label","children","menuComponent","menuValue","onMenuChange","onMenuItemClick","MenuComponent","Components","Menu","enter","leave","enterDuration","leaveDuration","onAnimationStyle","other","document","renderMenuText","renderMenuIcon","renderMenu","PureComponent","defaultProps","Icon","Text","DropdownElement"],"mappings":"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","file":"dropdownmenu.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport EventListener from 'react-event-listener';\nimport elementType from 'react-prop-types/lib/elementType';\nimport { isNodeInRoot } from '../../utilities';\nimport SemanticCSSTransition from '../../animation/animation';\nimport AnimationProps from '../../animation/animationProps';\nimport DropdownElement from './dropdownelement';\nimport Icon from './../../elements/icon/icon';\nimport Text from './../../elements/simple/text';\nimport Menu from './../../views/menu/menu';\n\n/**\n * Dropdown menu with animations\n */\nexport default class DropdownMenu extends React.PureComponent {\n    static propTypes = {\n        ...DropdownElement.propTypes,\n        ...AnimationProps.propTypes,\n        /**\n         * Active/Close menu\n         */\n        active: PropTypes.bool,\n        /**\n         * Menu icon\n         */\n        icon: PropTypes.string,\n        /**\n         * Menu label\n         */\n        label: PropTypes.string,\n        /**\n         * Specify component to be used as Menu.\n         * Usually is should be menu but with custom options applied (for example inverted).\n         * DropdownMenu will pass some props to your Menu component, so you're responsive for passing it down to the level\n         */\n        menuComponent: elementType,\n        /**\n         * Menu active value\n         */\n        menuValue: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\n        ]),\n        /**\n         * Callback for active item change. Will not be fired if menuValue was omitted\n         * Will pass new menuValue or array of new menuValue\n         * If all items were unselected would pass null if menuValue is single value or empty array if menuValue is array\n         */\n        onMenuChange: PropTypes.func,\n        /**\n         * Callback for menu item click\n         */\n        onMenuItemClick: PropTypes.func,\n        /**\n         * Callback will be called when menu wants to be closed (for ex. from outside click)\n         */\n        onRequestClose: PropTypes.func\n    };\n\n    static defaultProps = {\n        ...DropdownElement.defaultProps,\n        ...AnimationProps.defaultProps,\n        enter: 'slide down in',\n        leave: 'slide down out',\n        enterDuration: 200,\n        leaveDuration: 200,\n        active: false,\n        icon: 'dropdown',\n        onMenuItemClick: () => {\n        },\n        onMenuChange: () => {\n        },\n        onRequestClose: () => {\n        }\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Icon: Icon,\n        Text: Text,\n        Menu: Menu,\n        DropdownElement: DropdownElement\n    };\n    /* eslint-enable */\n\n    /**\n     * Outside dropdown click\n     * @param {React.MouseEvent} e\n     */\n    onOutsideDropdownClick = (e) => {\n        const { active, onRequestClose } = this.props;\n        if (!active) {\n            return;\n        }\n        const dropdownElement = ReactDOM.findDOMNode(this);\n        if (dropdownElement) {\n            if (!isNodeInRoot(e.target, dropdownElement)) {\n                onRequestClose();\n            }\n        }\n    };\n\n    /**\n     * Renders dropdown icon\n     * @returns {*}\n     */\n    renderMenuIcon() {\n        if (typeof this.props.component === 'function') {\n            return null;\n        } else {\n            return <DropdownMenu.Components.Icon name={this.props.icon}/>\n        }\n    }\n\n    /**\n     * Renders dropdown text\n     * @returns {*}\n     */\n    renderMenuText() {\n        if (typeof this.props.component === 'function' || !this.props.label) {\n            return null;\n        } else {\n            return <DropdownMenu.Components.Text>{this.props.label}</DropdownMenu.Components.Text>\n        }\n    }\n\n    /**\n     * Render menu\n     */\n    renderMenu() {\n        /* eslint-disable no-use-before-define */\n        const {\n            active, children, menuComponent, menuValue, onMenuChange, onMenuItemClick\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        const MenuComponent = menuComponent || DropdownMenu.Components.Menu;\n\n        return (\n                <MenuComponent key=\"menu\"\n                               menuValue={menuValue}\n                               onMenuChange={onMenuChange}\n                               onMenuItemClick={onMenuItemClick}\n                >\n                    {children}\n                </MenuComponent>\n        );\n    }\n\n    /**\n     * Render\n     * @returns {JSX.Element}\n     */\n    render() {\n        /* eslint-disable no-use-before-define */\n        let {\n            active, enter, leave, enterDuration, leaveDuration, children, icon, label, menuComponent, menuValue,\n            onMenuChange, onMenuItemClick, onRequestClose, onAnimationStyle, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        return (\n            <DropdownMenu.Components.DropdownElement\n                {...other}\n                active={active}\n            >\n                {/* This will embed <noscript></noscript> inside dropdown div. Shouldn't cause any problems */}\n                <EventListener\n                    target={document}\n                    onMouseDownCapture={this.onOutsideDropdownClick}\n                    onTouchStartCapture={this.onOutsideDropdownClick}/>\n                {this.renderMenuText()}\n                {this.renderMenuIcon()}\n                <SemanticCSSTransition\n                    enter={enter}\n                    leave={leave}\n                    enterDuration={enterDuration}\n                    leaveDuration={leaveDuration}\n                >\n                    {active && this.renderMenu()}\n                </SemanticCSSTransition>\n            </DropdownMenu.Components.DropdownElement>\n        );\n    }\n}\n\n"]}