{"version":3,"sources":["../../../src/components/modules/accordion/accordion.jsx"],"names":["Accordion","onAccordionTitleClick","index","props","onAccordionChange","isAccordionChild","arrayChildren","Children","toArray","children","newChild","length","child","active","activeIndexes","indexOf","push","cloneElement","key","onClick","body","styled","animating","component","defaultClasses","fluid","inverted","enterAnimation","leaveAnimation","other","Component","className","getClasses","renderChildren","ui","context","accordion","PureComponent","contextTypes","bool","childContextTypes","defaultProps"],"mappings":"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","file":"accordion.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\n/**\n * Controlled accordion\n */\nexport default class Accordion extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Pass false to disable animation\n         */\n        animating: PropTypes.bool,\n        /**\n         * Current visible content. Strings and numbers are accepted\n         */\n        activeIndexes: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n        /**\n         * PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\n         */\n        fluid: PropTypes.bool,\n        /**\n         * An accordion can be formatted to appear on dark backgrounds\n         */\n        inverted: PropTypes.bool,\n        /**\n         * Callback when accordion wants to be changed\n         */\n        onAccordionChange: PropTypes.func,\n        /**\n         * A styled accordion adds basic formatting\n         */\n        styled: PropTypes.bool\n    };\n\n    static contextTypes = {\n        isAccordionChild: PropTypes.bool\n    };\n\n    static childContextTypes = {\n        isAccordionChild: PropTypes.bool\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        activeIndexes: [],\n        onAccordionChange: () => { }\n    };\n\n    getChildContext() {\n        return {\n            isAccordionChild: true\n        };\n    }\n\n\n    /**\n     * Accordion title click handler\n     *\n     * @param {number|string} index Index\n     */\n    onAccordionTitleClick = (index) => {\n        this.props.onAccordionChange(index);\n    };\n\n    /**\n     * Process children. Skips non active content\n     */\n    renderChildren() {\n        // not using child.type checking because these will fail if using some kind of HOC component\n        const arrayChildren = React.Children.toArray(this.props.children);\n        const newChild = [];\n        for (let index = 0; index < arrayChildren.length; index++) {\n            const child = arrayChildren[index];\n            if (child.props.index) {\n                let active = false;\n                // This is accordion title\n                if (this.props.activeIndexes.indexOf(child.props.index) !== -1) {\n                    // It should be active\n                    active = true;\n                }\n                newChild.push(React.cloneElement(child, {\n                    active: active,\n                    key: child.key ? child.key : child.props.index,\n                    onClick: this.onAccordionTitleClick\n                }));\n                const body = arrayChildren[index + 1];\n                if (body) {\n                    newChild.push(\n                        React.cloneElement(body, {\n                            active: active,\n                            key: body.key ? body.key : `content-${child.props.index}`,\n                            styled: this.props.styled\n                        })\n                    );\n                    // skip next element\n                    index++;\n                }\n            }\n        }\n        return newChild;\n    }\n\n    render() {\n        const {\n            animating, component, children, defaultClasses, activeIndexes, fluid, inverted,\n            onAccordionChange, styled, enterAnimation, leaveAnimation, ...other\n        } = this.props;\n        const Component = component;\n\n        other.className = classNames(other.className, this.getClasses());\n\n        return (\n            <Component {...other}>\n                {this.renderChildren()}\n            </Component>\n        )\n    }\n\n    getClasses() {\n        return {\n            // default\n            ui: this.props.defaultClasses && !this.context.isAccordionChild,\n\n            // positioning\n\n            // types\n            styled: this.props.styled,\n\n            // variations\n            fluid: this.props.fluid,\n            inverted: this.props.inverted,\n\n            // component\n            accordion: this.props.defaultClasses\n        }\n    }\n}\n"]}