{"version":3,"sources":["../../../src/components/modules/accordion/accordiontitle.jsx"],"names":["AccordionTitle","onClick","event","preventDefault","props","index","component","children","defaultClasses","active","icon","iconComponent","other","Component","IconComponent","Components","Icon","className","title","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;IAGqBA,c;;;;;;;;;;;;;;0MA0CjBC,O,GAAU,UAACC,KAAD,EAAW;AACjBA,kBAAMC,cAAN;AADiB,8BAEU,MAAKC,KAFf;AAAA,gBAETC,KAFS,eAETA,KAFS;AAAA,gBAEFJ,OAFE,eAEFA,OAFE;;AAGjB,gBAAIA,OAAJ,EAAa;AACTA,wBAAQI,KAAR;AACH;AACJ,S;;;AAhBD;;AAIA;;AAEA;;;;;;;;iCAYS;AAAA,yBAGD,KAAKD,KAHJ;AAAA,gBAEDE,SAFC,UAEDA,SAFC;AAAA,gBAEUC,QAFV,UAEUA,QAFV;AAAA,gBAEoBC,cAFpB,UAEoBA,cAFpB;AAAA,gBAEoCC,MAFpC,UAEoCA,MAFpC;AAAA,gBAE4CC,IAF5C,UAE4CA,IAF5C;AAAA,gBAEkDC,aAFlD,UAEkDA,aAFlD;AAAA,gBAEiEN,KAFjE,UAEiEA,KAFjE;AAAA,gBAEwEJ,OAFxE,UAEwEA,OAFxE;AAAA,gBAEoFW,KAFpF;;AAIL,gBAAMC,YAAYP,SAAlB;AACA,gBAAMQ,gBAAgBH,iBAAiBX,eAAee,UAAf,CAA0BC,IAAjE;;AAEAJ,kBAAMK,SAAN,GAAkB,0BAAWL,MAAMK,SAAjB,EAA4B;AAC1CC,uBAAOV,cADmC;AAE1CC,wBAAQA;AAFkC,aAA5B,CAAlB;AAIA;AACA,mBACI;AAAC,yBAAD;AAAA,6BAAeG,KAAf,IAAsB,SAAS,KAAKX,OAApC;AACI,8CAAC,aAAD,IAAe,MAAMS,IAArB,GADJ;AAEKH;AAFL,aADJ;AAMH;;;;EApEuC,gBAAMY,a,UA0BvCC,Y,gBACA,uBAAaA,Y;AAChBX,YAAQ,K;AACRC,UAAM;WAIHK,U,GAAa;AAChBC;AADgB,C;kBAjCHhB,c","file":"accordiontitle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\nimport elementType from 'react-prop-types/lib/elementType';\nimport Icon from './../../elements/icon/icon';\n\n/**\n * Title element for Accordion\n */\nexport default class AccordionTitle extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * True for active (visible) accordion section. This is being set by Accordion itself\n         */\n        active: PropTypes.bool,\n        /**\n         * Icon name\n         */\n        icon: PropTypes.string,\n        /**\n         * Allows to override icon component\n         */\n        iconComponent: elementType,\n        /**\n         * Accordion index. Used by Accordion component to control which content should be hidden/displayed\n         */\n        index: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n        /**\n         * Click handler. Being set by Accordion\n         */\n        onClick: PropTypes.func\n\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        active: false,\n        icon: 'dropdown'\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Icon: Icon\n    };\n    /* eslint-enable */\n\n    /**\n     * Title was clicked\n     * @param event\n     */\n    onClick = (event) => {\n        event.preventDefault();\n        const { index, onClick } = this.props;\n        if (onClick) {\n            onClick(index);\n        }\n    }\n\n    render() {\n        const {\n            component, children, defaultClasses, active, icon, iconComponent, index, onClick, ...other\n        } = this.props;\n        const Component = component;\n        const IconComponent = iconComponent || AccordionTitle.Components.Icon;\n\n        other.className = classNames(other.className, {\n            title: defaultClasses,\n            active: active\n        });\n        // Set style to initial style, just style will contain animating values, we don't want animate the title\n        return (\n            <Component {...other} onClick={this.onClick}>\n                <IconComponent name={icon}/>\n                {children}\n            </Component>\n        );\n    }\n}\n"]}