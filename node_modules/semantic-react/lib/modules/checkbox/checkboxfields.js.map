{"version":3,"sources":["../../../src/components/modules/checkbox/checkboxfields.jsx"],"names":["CheckboxFields","props","active","radio","state","key","setActive","index","element","Children","count","children","cloneChild","only","map","child","type","Components","Checkbox","DOM","div","className","name","component","defaultClasses","disabled","onClick","readOnly","other","getClasses","createElement","renderChildren","boundClick","bind","cloneElement","checked","getActive","classes","fields","Array","isArray","indexOf","position","splice","push","setState","PureComponent","defaultProps"],"mappings":"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","file":"checkboxfields.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Checkbox from './checkbox';\nimport DefaultProps  from '../../defaultProps';\n\nexport default class CheckboxFields extends React.PureComponent {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        disabled: PropTypes.bool,\n        name: PropTypes.string.isRequired,\n        onClick: PropTypes.func,\n        radio: PropTypes.bool,\n        readOnly: PropTypes.bool,\n        type: PropTypes.oneOf([\n            'grouped',\n            'inline'\n        ]).isRequired\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Checkbox: Checkbox\n    };\n    /* eslint-enable */\n\n    constructor(props) {\n        super(props);\n\n        let active = this.props.radio ? -1 : [];\n\n        this.state = {\n            active: active\n        };\n    }\n\n    onClick(key)  {\n        // don't remove radio buttons if you click them twice\n        if (key === this.state.active && this.props.radio) {\n            return;\n        // but do remove for everything else\n        } else {\n            this.setActive(key);\n        }\n    }\n\n    renderChildren() {\n        let index = 0;\n        let element = null;\n\n        if (React.Children.count(this.props.children) === 1) {\n            return this.cloneChild(index,\n                React.Children.only(this.props.children)\n            );\n        } else {\n            return React.Children.map(this.props.children, child => {\n                if (child.type == CheckboxFields.Components.Checkbox) {\n                    element = this.cloneChild(index, child);\n\n                    element = React.DOM.div({\n                        key: index,\n                        className: 'field'\n                    }, element);\n\n                    index++;\n                } else if (typeof child === 'string') {\n                    return (\n                        <label htmlFor={this.props.name}>{child}</label>\n                    );\n                } else {\n                    element = child;\n                }\n\n                return element;\n            });\n        }\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { component, defaultClasses, name, disabled, onClick, radio, readOnly, type, ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n        other.className = classNames(this.props.className, this.getClasses());\n\n        return React.createElement(\n            this.props.component,\n            other,\n            this.renderChildren()\n        );\n    }\n\n    // clone a chid and update the props\n    cloneChild(index, child) {\n        let boundClick = this.onClick.bind(this, index);\n\n        /* eslint-disable no-use-before-define */\n        let { children, component, defaultClasses, onClick, type,\n              ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        return React.cloneElement(child, {\n            key: index,\n            checked: this.getActive(index),\n            onClick: boundClick,\n            radio: this.props.radio,\n            readOnly: this.props.readOnly || this.props.disabled,\n            ...other\n        });\n    }\n\n    getClasses() {\n        let classes = {\n            // default\n\n            // positioning\n\n            // types\n\n            // component\n\n            // variations\n            fields: React.Children.count(this.props.children) > 1\n        };\n\n        classes[this.props.type] = !!this.props.type;\n\n        return classes;\n    }\n\n    getActive(index) {\n        let state = this.state.active;\n        let active = false;\n\n        if (Array.isArray(state)) {\n            active = state.indexOf(index) > -1 ? true : false;\n        } else {\n            active = state == index ? true : false;\n        }\n\n        return active;\n    }\n\n    setActive(index) {\n        if (this.props.readOnly || this.props.disabled) return;\n\n        let state = this.state.active;\n\n        // should only be an array if it's checkbox, not radio\n        // IE 9+ for indexOf\n        if (Array.isArray(state)) {\n            let position = state.indexOf(index);\n\n            if (position > -1) {\n                state.splice(position, 1);\n            } else {\n                state.push(index);\n            }\n\n        // it's a radio\n        } else {\n            state = index;\n        }\n\n        this.setState({\n            active: state\n        });\n    }\n}\n"]}