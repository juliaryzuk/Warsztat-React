'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _animationProps = require('./animationProps');

var _animationProps2 = _interopRequireDefault(_animationProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Transition children class. Pretty much copy of ReactCSSTransitionGroupChild
 * Differences:
 * 1) There is no appear animation
 * 2) Supports multiple class names in 'enter' and 'leave', so can pass 'fade in' and 'fade out'
 * 3) Automatically adds 'transition visible' and 'transition hidden / 'animating' classes
 */
var SemanticCSSTransitionChildren = (_temp = _class = function (_React$Component) {
    _inherits(SemanticCSSTransitionChildren, _React$Component);

    function SemanticCSSTransitionChildren(props) {
        _classCallCheck(this, SemanticCSSTransitionChildren);

        var _this = _possibleConstructorReturn(this, (SemanticCSSTransitionChildren.__proto__ || Object.getPrototypeOf(SemanticCSSTransitionChildren)).call(this, props));

        _this.componentWillAppear = function (done) {
            var runOnMount = _this.props.runOnMount;

            if (runOnMount) {
                _this.componentWillEnter(done);
            } else {
                done();
            }
        };

        _this.componentDidAppear = function () {
            var _this$props = _this.props,
                runOnMount = _this$props.runOnMount,
                onEnter = _this$props.onEnter;

            if (runOnMount) {
                onEnter();
            }
        };

        _this.componentWillEnter = function (done) {
            var enter = _this.props.enter;

            if (typeof enter === 'string') {
                _this.enterTransition(done);
            } else {
                done();
            }
        };

        _this.componentDidEnter = function () {
            _this.props.onEnter();
        };

        _this.componentWillLeave = function (done) {
            var leave = _this.props.leave;

            if (typeof leave === 'string') {
                _this.leaveTransition(done);
            } else {
                done();
            }
        };

        _this.componentDidLeave = function () {
            _this.props.onLeave();
        };

        _this.enterTransition = function (done) {
            var element = _reactDom2.default.findDOMNode(_this);
            var _this$props2 = _this.props,
                enter = _this$props2.enter,
                enterDuration = _this$props2.enterDuration;

            if (!element) {
                done();
                return;
            }

            if (!element.classList.contains('transition')) {
                element.classList.add('transition');
            }
            if (element.classList.contains('hidden')) {
                element.classList.remove('hidden');
            }
            if (!element.classList.contains('visible')) {
                element.classList.add('visible');
            }

            // bail if we don't have duration
            if (!enterDuration) {
                done();
                return;
            }
            element.classList.add('animating');
            element.style.animationDuration = enterDuration + 'ms';

            // Add transition classes
            var enterClassNames = enter.split(' ');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = enterClassNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var name = _step.value;

                    element.classList.add(name);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var timeout = null;
            var endListener = function endListener() {
                clearTimeout(timeout);

                element.classList.remove('animating');
                element.style.animationDuration = '';

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = enterClassNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var name = _step2.value;

                        element.classList.remove(name);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                done();
            };

            // Clean-up the animation after the specified delay
            timeout = setTimeout(endListener, enterDuration);
            _this.transitionTimeouts.push(timeout);
        };

        _this.leaveTransition = function (done) {
            var element = _reactDom2.default.findDOMNode(_this);
            var _this$props3 = _this.props,
                leave = _this$props3.leave,
                leaveDuration = _this$props3.leaveDuration;

            if (!element) {
                done();
                return;
            }

            // bail if we don't have duration
            if (!leaveDuration) {
                done();
                return;
            }

            element.classList.add('animating');
            element.style.animationDuration = leaveDuration + 'ms';

            // Add transition classes
            var leaveClassNames = leave.split(' ');
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = leaveClassNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var name = _step3.value;

                    element.classList.add(name);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var timeout = null;
            var endListener = function endListener() {
                clearTimeout(timeout);

                element.classList.remove('animating');
                element.style.animationDuration = '';

                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = leaveClassNames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var name = _step4.value;

                        element.classList.remove(name);
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                done();
            };

            // Clean-up the animation after the specified delay
            timeout = setTimeout(endListener, leaveDuration);
            _this.transitionTimeouts.push(timeout);
        };

        _this.transitionTimeouts = [];
        return _this;
    }

    _createClass(SemanticCSSTransitionChildren, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
            this.transitionTimeouts.forEach(function (timeout) {
                clearTimeout(timeout);
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.Children.only(this.props.children);
        }
    }]);

    return SemanticCSSTransitionChildren;
}(_react2.default.Component), _class.defaultProps = _extends({}, _animationProps2.default.defaultProps, {
    onEnter: function onEnter() {},
    onLeave: function onLeave() {},
    runOnMount: false
}), _temp);
exports.default = SemanticCSSTransitionChildren;
//# sourceMappingURL=animationChildren.js.map