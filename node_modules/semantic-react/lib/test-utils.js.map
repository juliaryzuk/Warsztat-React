{"version":3,"sources":["../src/components/test-utils.jsx"],"names":["itShouldPassUnusedDataProps","itShouldConsumeOwnAndPassCustomProps","standardProps","style","background","className","Component","props","it","wrapper","to","have","prop","testPassDataProps","describe","componentWrapper","find","shallow","fail"],"mappings":";;;;;;kQAAA;;;QAYgBA,2B,GAAAA,2B;QAUAC,oC,GAAAA,oC;;AArBhB;;;;AACA;;AACA;;;;AAEA,IAAMC,gBAAgB;AAClBC,WAAO;AACHC,oBAAY;AADT,KADW;AAIlBC,eAAW;AAJO,CAAtB;;AAOO,SAASL,2BAAT,CAAqCM,SAArC,EAAgDC,KAAhD,EAAuD;AAC1DC,OAAG,0BAAH,EAA+B,YAAM;;AAEjC,YAAIC,UAAU,qBAAQ,8BAAC,SAAD,eAAeF,KAAf;AAClB,yBAAU,MADQ,IAAR,CAAd;;AAGA,0BAAOE,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBC,IAAxB,CAA6B,WAA7B,EAA0C,MAA1C;AACH,KAND;AAOH;;AAEM,SAASX,oCAAT,CAA8CK,SAA9C,EAAyDC,KAAzD,EAA0F;AAAA,QAA1BM,iBAA0B,uEAAN,IAAM;;AAC7FC,aAAS,4BAAT,EAAuC,YAAM;AACzCN,WAAG,yBAAH,EAA8B,YAAM;AAChC;AACA;AACA;AACA;AACA,gBAAIC,UAAU,qBAAQ;AAAA;AAAA;AAAK,8CAAC,SAAD,EAAeF,KAAf;AAAL,aAAR,CAAd;;AAEA;AACA,gBAAIQ,mBAAmBN,QAAQO,IAAR,CAAaV,SAAb,EAAwBW,OAAxB,EAAvB;;AAEA,iBAAK,IAAIL,IAAT,IAAiBL,KAAjB,EAAwB;AACpB,kCAAOE,QAAQO,IAAR,CAAaV,SAAb,CAAP,EAAgCI,EAAhC,CAAmCC,IAAnC,CAAwCC,IAAxC,CAA6CA,IAA7C,EAAmDL,MAAMK,IAAN,CAAnD;AACA;AACA;AACA,oBAAI,OAAOG,iBAAiBH,IAAjB,CAAsBA,IAAtB,CAAP,KAAuC,WAA3C,EAAwD;AACpD,iCAAOM,IAAP,CAAY,IAAZ,EAAkB,IAAlB,iDAAoEN,IAApE;AACH;AACJ;AACJ,SAlBD;;AAoBAJ,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAIC,UAAU,qBAAQ;AAAA;AAAA;AAAK,8CAAC,SAAD,eAAeF,KAAf,EAA0BL,aAA1B;AAAL,aAAR,CAAd;AACA,gBAAIa,mBAAmBN,QAAQO,IAAR,CAAaV,SAAb,EAAwBW,OAAxB,EAAvB;;AAEA,iBAAK,IAAIL,IAAT,IAAiBV,aAAjB,EAAgC;AAC5B,kCAAOO,QAAQO,IAAR,CAAaV,SAAb,CAAP,EAAgCI,EAAhC,CAAmCC,IAAnC,CAAwCC,IAAxC,CAA6CA,IAA7C,EAAmDV,cAAcU,IAAd,CAAnD;AACA,oBAAI,OAAOG,iBAAiBH,IAAjB,CAAsBA,IAAtB,CAAP,KAAuC,WAA3C,EAAwD;AACpD,iCAAOM,IAAP,CAAY,IAAZ,EAAkB,IAAlB,sDAA0EN,IAA1E;AACH;AACJ;AAEJ,SAXD;;AAaA,YAAIC,iBAAJ,EAAuB;AACnBb,wCAA4BM,SAA5B,EAAuCC,KAAvC;AACH;AACJ,KArCD;AAsCH","file":"test-utils.js","sourcesContent":["/* eslint-disable react/jsx-max-props-per-line */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\n\nconst standardProps = {\n    style: {\n        background: 'green'\n    },\n    className: 'test'\n};\n\nexport function itShouldPassUnusedDataProps(Component, props) {\n    it('passes unused data props', () => {\n\n        let wrapper = shallow(<Component {...props}\n            data-test=\"test\"/>);\n\n        expect(wrapper).to.have.prop('data-test', 'test');\n    });\n}\n\nexport function itShouldConsumeOwnAndPassCustomProps(Component, props, testPassDataProps = true) {\n    describe('should properly pass props', () => {\n        it('consumes all used props', () => {\n            // Funny trick to check component and it's rendered output\n            // We need to validate both props passed to component and props for the component's rendered output\n            // If we do shallow(<Component {...props}/>) then shallow renderer will do component rendering instead\n            // Actually component rendering will be performed later\n            let wrapper = shallow(<div><Component {...props} /></div>);\n            \n            // Here the new wrapper for component rendered output\n            let componentWrapper = wrapper.find(Component).shallow();\n\n            for (let prop in props) {\n                expect(wrapper.find(Component)).to.have.prop(prop, props[prop]);\n                // Check if rendered output doesn't contain consumed prop\n                // Using expect.fail() here to prevent standard error to avoid confusion, since it will display component name\n                if (typeof componentWrapper.prop(prop) !== 'undefined') {\n                    expect.fail(null, null, `Rendered output shouldn't have property: ${prop}`);\n                }\n            }\n        });\n\n        it('passes standard props', () => {\n            let wrapper = shallow(<div><Component {...props} {...standardProps}/></div>);\n            let componentWrapper = wrapper.find(Component).shallow();\n            \n            for (let prop in standardProps) {\n                expect(wrapper.find(Component)).to.have.prop(prop, standardProps[prop]);\n                if (typeof componentWrapper.prop(prop) === 'undefined') {\n                    expect.fail(null, null, `Rendered output should have standard property: ${prop}`);\n                }\n            }\n            \n        });\n\n        if (testPassDataProps) {\n            itShouldPassUnusedDataProps(Component, props);\n        }\n    });\n}\n\n"]}